{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "eastus",
      "metadata": {
        "description": "Azure Region for the site deployment. All Resources provisioned are created here"
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "AzureCloud",
      "allowedValues": [
        "AzureCloud",
        "AzureGermanCloud",
        "AzureUSGovernment",
        "AzureChinaCloud"
      ],
      "metadata": {
        "description": "(Optional) Azure Environment for the deployment. E.g:- Public Azure, U.S. Gov. Cloud, Azure Germany, Azure China"
      }
    },
    "deploymentPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Prefix applied to all resources provisioned as part of this template"
      },
      "maxLength": 3
    },
    "usesPrivateIP": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether Azure Files (SMB protocol) is used for the server config and portal content store"
      }
    },
    "deployPublicIPWhenUsingPrivateIP": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "(Optional) Deploys an unused public IP when using a Private Ip as Application Gateway V2 doesn't support only Private IP deployments yet."
      }
    },
    "usesExistingPublicIP": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether to use existing Public IP is usesPrivateIP is false"
      }
    },
    "existingPublicIPResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Resource Group for the existing Public IP"
      }
    },
    "existingPublicIPName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the existing Public IP"
      }
    },
    "dnsPrefixForPublicIpAddress": {
      "type": "string",
      "maxLength": 80,
      "defaultValue":"",
      "metadata": {
        "description": "DNS name for the Public IP address resource asociated with the site deployment. It needs to be unique across the region of deployment"
      }
    },
    "externalDnsHostName": {
      "type": "string",
      "metadata": {
        "description": "DNS name for the site deployment. It will be a custom domain (e.g. mysite.contoso.com) if using a Private IP or an SSL certificate, otherwise will be the Azure DNS <dnsPrefixForPublicIpAddress>.<location>.cloudapp.azure.com"
      }
    },
    "sslCertificateFileUrl": {
      "type": "string",
      "metadata": {
        "description": "Accessible file path for SSL Certificate"
      },
      "defaultValue": ""
    },
    "sslCertificateFileName": {
      "type": "string",
      "metadata": {
        "description": "File name for the SSL Certificate"
      },
      "defaultValue": ""
    },
    "sslCertificateData": {
      "type": "string",
      "metadata": {
        "description": "Base-64 encoded form of the .pfx file. This is the cert terminating on the Application Gateway."
      },
      "defaultValue": ""
    },
    "sslCertificatePassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for .pfx certificate"
      },
      "defaultValue": ""
    },
    "selfSignedSSLCertificatePassword": {
      "type": "securestring",
      "metadata": {
        "description": "Private Key for the Backend Self signed SSL Certificate"
      }
    },
    "virtualNetworkResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Resource Group for the existing Virtual Network specified with the 'existingVirtualNetworkName' parameter"
      }
    },
    "existingVirtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing Virtual Network"
      }
    },
    "subnetName": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing Subnet within the Virtual Network specified with the 'existingVirtualNetworkName' parameter"
      }
    },
    "appGatewaySubnetName": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing Subnet within the Virtual Network specified with the 'existingVirtualNetworkName' parameter"
      }
    },
    "appGatewayPrivateIP": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Available IP address in Application Gateway Subnet Range to be used with external dns name"
      }
    },
    "appGatewayPrivateIPSubnet": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Subnet associated with Private IP"
      }
    },
    "appGatewayName": {
      "type": "string",
      "metadata": {
        "description": "Name of Application Gateway Resource"
      }
    },
    "appGatewayResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Name of Application Gateway Resource Group Name"
      }
    },
    "imageReferences": {
      "type": "object",
      "metadata": {
        "description": "Details of ArcGIS marketplace image or User Images"
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Username for the Virtual Machine Administrator (Windows) Account"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Password for the Virtual Machine Administrator (Windows) Account"
      }
    },
    "virtualMachineNames": {
      "type": "string",
      "metadata": {
        "description": "Comma seperated list of names for the Virtual Machines. A maximum of 2 names may be specified for the single tier base deployment"
      }
    },
    "virtualMachineImageSpecs": {
      "type": "string",
      "metadata": {
        "description": "Comma seperated list of Image Type used refrencing useManagedDiskImage,userImageName,userImageResourceGroupName,imagePublisher,imageOffery and imageSKU by index"
      }
    },
    "virtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_DS3_v2",
      "metadata": {
        "description": "Machine size assigned to the the Virtual Machine(s)"
      }
    },
    "virtualMachineOSDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "StandardSSD_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "(Optional) Managed Disk Type for the Operating System (c Drive) Disk for the Virtual Machine(s)"
      }
    },
    "virtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "(Optional) Managed Disk Size for the Operating System (c Drive) Disk for the Virtual Machine(s)"
      }
    },
    "enableVirtualMachineDataDisk": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether an additional Managed Disk is attached to the Virtual Machine(s)"
      }
    },
    "virtualMachineDataDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "StandardSSD_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "(Optional) Managed disk type for the additional (Data) disk attached to the Virtual Machine(s)"
      }
    },
    "virtualMachineDataDiskSize": {
      "type": "int",
      "defaultValue": 32,
      "allowedValues": [
        32,
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "(Optional) Managed disk size for the additional (Data) disk attached to the Virtual Machine(s)"
      }
    },
    "spatiotemporalBigdataStoreVirtualMachineNames": {
      "type": "string",
      "metadata": {
        "description": "Comma seperated list of virtual machine names for the Spatiotemporal Big Data Store Tier"
      },
      "defaultValue": ""
    },
    "spatiotemporalBigDataStoreVirtualMachineImageSpecs": {
      "type": "string",
      "metadata": {
        "description": "Comma seperated list of Image Type used refrencing useManagedDiskImage,userImageName,userImageResourceGroupName,imagePublisher,imageOffery and imageSKU by index"
      },
      "defaultValue": ""
    },
    "spatiotemporalBigDataStoreVirtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_DS3_v2",
      "metadata": {
        "description": "Virtual Machine Size for the Spatiotemporal Big Data Store tier of machines"
      }
    },
    "spatiotemporalBigDataStoreVirtualMachineOSDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "StandardSSD_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "Managed Disk Type for the Operating System (c Drive) Disk for the Spatiotemporal Big Data Store tier of Virtual Machines"
      }
    },
    "spatiotemporalBigDataStoreVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "(Optional) Managed Disk Size for the Operating System (c Drive) Disk for the Portal tier of Virtual Machines"
      }
    },
    "enableSpatiotemporalBigDataStoreVirtualMachineDataDisk": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether an additional Managed Disk is attached to the Spatiotemporal Big Data Store tier of Virtual Machines"
      }
    },
    "spatiotemporalBigDataStoreVirtualMachineDataDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "StandardSSD_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "(Optional) Managed disk type for the additional (Data) disk attached to the Spatiotemporal Big Data Store tier of Virtual Machines"
      }
    },
    "spatiotemporalBigDataStoreVirtualMachineDataDiskSize": {
      "type": "int",
      "defaultValue": 32,
      "allowedValues": [
        32,
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "(Optional) Managed disk type for the additional (Data) disk attached to the Spatiotemporal Big Data tier of Virtual Machines"
      }
    },
    "isTileCacheDataStoreClustered": {
      "type": "bool",
      "metadata": {
        "description": "TileCache Datastore architecture mode set to `cluster` if true, else `masterSlave`"
      },
      "defaultValue": false
    },
    "tileCacheDataStoreVirtualMachineNames": {
      "type": "string",
      "metadata": {
        "description": "Comma seperated list of virtual machine names for the Tile Cache Data Store Tier"
      },
      "defaultValue": ""
    },
    "tileCacheDataStoreVirtualMachineImageSpecs": {
      "type": "string",
      "metadata": {
        "description": "Comma seperated list of Image Type used refrencing useManagedDiskImage,userImageName,userImageResourceGroupName,imagePublisher,imageOffery and imageSKU by index"
      },
      "defaultValue": ""
    },
    "tileCacheDataStoreVirtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_DS3_v2",
      "metadata": {
        "description": "Virtual Machine Size for the Tile Cache Data Store tier of machines"
      }
    },
    "tileCacheDataStoreVirtualMachineOSDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "StandardSSD_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "Managed Disk Type for the Operating System (c Drive) Disk for the Tile Cache Data Store tier of Virtual Machines"
      }
    },
    "tileCacheDataStoreVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "(Optional) Managed Disk Size for the Operating System (c Drive) Disk for the Portal tier of Virtual Machines"
      }
    },
    "enableTileCacheDataStoreVirtualMachineDataDisk": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether an additional Managed Disk is attached to the Tile Cache Data Store tier of Virtual Machines"
      }
    },
    "tileCacheDataStoreVirtualMachineDataDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "StandardSSD_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "(Optional) Managed disk type for the additional (Data) disk attached to the Tile Cache Store tier of Virtual Machines"
      }
    },
    "tileCacheDataStoreVirtualMachineDataDiskSize": {
      "type": "int",
      "defaultValue": 32,
      "allowedValues": [
        32,
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "(Optional) Managed disk type for the additional (Data) disk attached to the Tile Cache Data tier of Virtual Machines"
      }
    },
    "timeZoneId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Standard Id for the timezone to set for the Virtual Machines in the deployment"
      }
    },
    "enableAutomaticUpdates": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether to enable Automatic (Windows) Operating System updates"
      }
    },
    "joinWindowsDomain": {
      "type": "bool",
      "metadata": {
        "description": "(Optional) Indicates whether the virtual machines should join an existing Windows Active Directory which provides domain join and DNS services in the Virtual Network"
      },
      "defaultValue": false
    },
    "windowsDomainName": {
      "type": "string",
      "metadata": {
        "description": "(Optional) Domain FQDN where the virtual machine will be joined. Required if joinWindowsDomain = true"
      },
      "defaultValue": ""
    },
    "windowsDomainAdministratorUserName": {
      "type": "string",
      "metadata": {
        "description": "(Optional) Username for the Active Directory Domain Administrator account where the virtual machine will be joined. Required if joinWindowsDomain = true"
      },
      "defaultValue": ""
    },
    "windowsDomainAdministratorPassword": {
      "type": "securestring",
      "metadata": {
        "description": "(Optional) Password for the Active Directory Domain Administrator account where the virtual machine will be joined. Required if joinWindowsDomain = true"
      },
      "defaultValue": ""
    },
    "omsWorkspaceName": {
      "type": "string",
      "metadata": {
        "description": "Azure Monitor Logs workspace name"
      },
      "defaultValue": ""
    },
    "omsWorkspaceResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Azure Monitor Logs Workspace Resource Group Name"
      },
      "defaultValue": ""
    },
    "serverContext": {
      "type": "string",
      "metadata": {
        "description": "ArcGIS Server Site Context"
      },
      "defaultValue": "server"
    },
    "portalContext": {
      "type": "string",
      "metadata": {
        "description": "ArcGIS Portal Site Context"
      },
      "defaultValue": "portal"
    },
    "arcgisServiceAccountUserName": {
      "type": "string",
      "metadata": {
        "description": "User name for the ArcGIS (Windows) Service Account"
      },
      "defaultValue": "arcgis"
    },
    "arcgisServiceAccountPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the ArcGIS (Windows) Service Account"
      },
      "defaultValue": ""
    },
    "arcgisServiceAccountIsDomainAccount": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether ArcGIS Service Account is a Domain Account."
      }
    },
    "primarySiteAdministratorAccountUserName": {
      "type": "string",
      "metadata": {
        "description": "User name for the ArcGIS Server Site Primary Site Administrator"
      },
      "defaultValue": "siteadmin"
    },
    "primarySiteAdministratorAccountPassword": {
      "type": "securestring",
      "metadata": {
        "description": "User name for the ArcGIS Server Site Primary Site Administrator"
      }
    },
    "serverLicenseFileUrl": {
      "type": "string",
      "metadata": {
        "description": "Accessible file path for ArcGIS Server License"
      },
      "defaultValue": ""
    },
    "serverLicenseFileName": {
      "type": "string",
      "metadata": {
        "description": "File name for the ArcGIS Server License"
      },
      "defaultValue": ""
    },
    "portalLicenseFileUrl": {
      "type": "string",
      "metadata": {
        "description": "Accessible file path for Portal for ArcGIS License"
      },
      "defaultValue": ""
    },
    "portalLicenseFileName": {
      "type": "string",
      "metadata": {
        "description": "File name for the Portal for ArcGIS License"
      },
      "defaultValue": ""
    },
    "portalLicenseUserTypeId": {
      "type": "string",
      "metadata": {
        "description": "Portal for ArcGIS License User Type Id to be used to Configure Portal Site"
      },
      "defaultValue": ""
    },
    "dataStoreTypes": {
      "type": "string",
      "defaultValue": "Relational",
      "metadata": {
        "description": "(Optional) The types of ArcGIS Data Stores that are enabled for this deployment"
      }
    },
    "dataStoreTypesForBaseDeploymentServers": {
      "type": "string",
      "defaultValue": "Relational",
      "metadata": {
        "description": "(Optional) The types of ArcGIS Data Stores that are enabled for this base deployment servers"
      }
    },
    "isMultiMachineTileCacheDataStore": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether TileCache Datastore is a multi machine setup"
      }
    },
    "useCloudStorage": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether Azure Storage is used for the server config and portal content store"
      }
    },
    "useAzureFiles": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether Azure Files (SMB protocol) is used for the server config and portal content store"
      }
    },
    "fileShareName": {
      "type": "string",
      "metadata": {
        "description": "(Optional) Name of the file share on the file share host"
      },
      "defaultValue": "fileshare"
    },
    "cloudStorageAccountName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Name of the Azure Storage Account used. Required if 'useCloudStorage' is set to true"
      }
    },
    "cloudStorageAccountResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Name of the resource group for the Azure Storage Account specified with 'cloudStorageAccountName'. Required if 'useCloudStorage' is set to true"
      }
    },
    "cloudStorageAccountKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Storage Account Access Key for the Azure Storage Account specified with 'cloudStorageAccountName'. Required if 'useCloudStorage' is set to true"
      }
    },
    "enableServerLogHarvesterPlugin": {
      "type": "bool",
      "metadata": {
        "description": "Enable Server Log Harvester Plugin "
      },
      "defaultValue": false
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "(SAS) Shared Access Token for the deployment artifacts in an Azure Blob Storage Container"
      },
      "defaultValue": ""
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "Fully qualified URL for the deployment artifacts location in an Azure Blob Storage Container"
      },
      "defaultValue": ""
    },
    "debugMode": {
      "type": "bool",
      "metadata": {
        "description": "(Optional) Indicates whether to enable debug settings on the site deployment. Used for troubleshooting only and should not be used for a Production Deployment"
      },
      "defaultValue": false
    },
    "enableRDPAccess": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether Remote Desktop Access to the File Share Machine should be enabled."
      }
    },
    "enableAutoShutDown": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether to enable auto shutdown at specified time."
      }
    },
    "autoShutDownTime": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Auto Shut down time in hh:ss format."
      }
    },
    "deploymentTimestamp": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "An optional timestamp used to record as a tag which is used by ArcGIS Deployment Tools"
      }
    },
    "arcgisDeploymentVersion": {
      "type": "string",
      "metadata": {
        "description": "(Optional) Version number of the ArcGIS Software used in the deployment"
      },
      "defaultValue": "10.9"
    },
    "arcgisDeploymentId": {
      "type": "string",
      "metadata": {
        "description": "Deployment Id required in case of post deployment operations and optional in case of new deployments"
      },
      "defaultValue": ""
    },
    "deploymentTrackingID": {
      "type": "string",
      "metadata": {
        "description": "(Optional) deployment Tracking ID based on Orchestrator being Automation or Cloud Builder "
      },
      "defaultValue": "01702208-6a87-494b-9f6c-5e6be4bea47b"
    }
  },
  "variables": {
    "deploymentId": "[if(empty(parameters('arcgisDeploymentId')),uniqueString(resourceGroup().id, concat(parameters('serverContext'), parameters('location')), parameters('externalDnsHostName')),parameters('arcgisDeploymentId'))]",
    "computeApiVersion": "2018-06-01",
    "networkApiVersion": "2018-08-01",
    "environmentToBlobEndpoint": {
      "AzureCloud": ".blob.core.windows.net",
      "AzureGermanCloud": ".blob.core.cloudapi.de",
      "AzureUSGovernment": ".blob.core.usgovcloudapi.net",
      "AzureChinaCloud": ".blob.core.chinacloudapi.cn"
    },
    "publicIPAddressResourceName": "[if(parameters('usesExistingPublicIP'), parameters('existingPublicIPName'), concat(parameters('deploymentPrefix'), 'PublicIP'))]",
    "publicIPAddressRDPResourceName": "[concat(parameters('deploymentPrefix'), 'PublicIP-RDP')]",
    "publicIPAddressResourceGroupName": "[if(parameters('usesExistingPublicIP'), parameters('existingPublicIPResourceGroupName'), resourceGroup().name)]",
    "unusedPublicIPPWhenUsingPrivateIPDnsPrefix": "[concat('ip',variables('deploymentId'),parameters('serverContext'))]",
    "unusedPublicIPWhenUsingPrivateIPResourceName": "[concat(variables('unusedPublicIPPWhenUsingPrivateIPDnsPrefix'),'UnusedPublicIP')]",
    "vnetID": "[resourceId(parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks',parameters('existingVirtualNetworkName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',parameters('subnetName'))]",
    "appGatewaySubnetRef": "[concat(variables('vnetID'),'/subnets/',parameters('appGatewaySubnetName'))]",
    "nicName": "nic",
    "baseDeploymentAvailablitySetName": "[concat(parameters('deploymentPrefix'), 'AvailabilitySet-BaseDeployment')]",
    "virtualMachineNames": "[split(parameters('virtualMachineNames'),',')]",
    "portalVirtualMachineNames": "[split(parameters('virtualMachineNames'),',')]",
    "serverVirtualMachineNames": "[split(parameters('virtualMachineNames'),',')]",
    "numberOfVirtualMachines": "[length(variables('virtualMachineNames'))]",
    "numberOfServerVirtualMachines": "[length(variables('virtualMachineNames'))]",
    "numberOfPortalVirtualMachines": "[length(variables('virtualMachineNames'))]",
    "virtualMachineImageSpecs": "[split(parameters('virtualMachineImageSpecs'),',')]",
    "spatiotemporalBigDataStoreAvailablitySetName": "[concat(parameters('deploymentPrefix'), 'AvailabilitySet-SpatiotemporalDataStore')]",
    "spatiotemporalBigDataStoreVirtualMachineNames": "[split(parameters('spatiotemporalBigdataStoreVirtualMachineNames'),',')]",
    "spatiotemporalBigDataStoreVirtualMachineNameOptions": {
      "true": "[variables('spatiotemporalBigDataStoreVirtualMachineNames')]",
      "false": [
        "sa",
        "sb",
        "sc",
        "sd",
        "se",
        "sf",
        "sg",
        "sh",
        "si",
        "sj",
        "sk",
        "sl",
        "sm",
        "sn",
        "so",
        "sp"
      ]
    },
    "numberOfSpatiotemporalBigDataStoreVirtualMachines": "[length(variables('spatiotemporalBigDataStoreVirtualMachineNames'))]",
    "spatiotemporalBigDataStoreVirtualMachineImageSpecs": "[split(parameters('spatiotemporalBigDataStoreVirtualMachineImageSpecs'),',')]",
    "spatiotemporalBigDataStoreVirtualMachineImageSpecsOptions": {
      "true": "[variables('spatiotemporalBigdataStoreVirtualMachineImageSpecs')]",
      "false": [
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0"
      ]
    },
    "tileCacheDataStoreAvailablitySetName": "[concat(parameters('deploymentPrefix'), 'AvailabilitySet-TileCacheDataStore')]",
    "tileCacheDataStoreVirtualMachineNames": "[split(parameters('tileCacheDataStoreVirtualMachineNames'),',')]",
    "tileCacheDataStoreVirtualMachineNameOptions": {
      "true": "[variables('tileCacheDataStoreVirtualMachineNames')]",
      "false": [
        "ta",
        "tb",
        "tc",
        "td",
        "te",
        "tf",
        "tg",
        "th",
        "ti",
        "tj",
        "tk",
        "tl",
        "tm",
        "tn",
        "to",
        "tp"
      ]
    },
    "numberOftileCacheDataStoreVirtualMachines": "[length(variables('tileCacheDataStoreVirtualMachineNames'))]",
    "tileCacheDataStoreVirtualMachineImageSpecs": "[split(parameters('tileCacheDataStoreVirtualMachineImageSpecs'),',')]",
    "tileCacheDataStoreVirtualMachineImageSpecsOptions": {
      "true": "[variables('tileCacheDataStoreVirtualMachineImageSpecs')]",
      "false": [
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0"
      ]
    },
    "generateSSLCertsFileName": "GenerateSSLCerts.ps1",
    "frontendIPConfigurationsName": "[concat(parameters('deploymentPrefix'), 'EnterpriseAppGatewayFrontendIP')]",
    "publicIPFrontEndConfiguration": [
      {
        "name": "[variables('frontendIPConfigurationsName')]",
        "properties": {
          "PublicIPAddress": {
            "id": "[resourceId(variables('publicIPAddressResourceGroupName'),'Microsoft.Network/publicIPAddresses',variables('publicIPAddressResourceName'))]"
          }
        }
      }
    ],
    "privateIPFrontEndConfiguration": {
      "true": [
        {
          "name": "unusedAppGatewayFrontendPublicIP",
          "properties": {
            "PublicIPAddress": {
              "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('unusedPublicIPWhenUsingPrivateIPResourceName'))]"
            }
          }
        },
        {
          "name": "[variables('frontendIPConfigurationsName')]",
          "properties": {
            "privateIPAddress": "[parameters('appGatewayPrivateIP')]",
            "privateIPAllocationMethod": "Static",
            "subnet": {
              "id": "[resourceId(parameters('virtualNetworkResourceGroupName'),'Microsoft.Network/virtualNetworks/subnets', parameters('existingVirtualNetworkName'), parameters('appGatewayPrivateIPSubnet'))]"
            }
          }
        }
      ],
      "false": [
        {
          "name": "[variables('frontendIPConfigurationsName')]",
          "properties": {
            "privateIPAddress": "[parameters('appGatewayPrivateIP')]",
            "privateIPAllocationMethod": "Static",
            "subnet": {
              "id": "[resourceId(parameters('virtualNetworkResourceGroupName'),'Microsoft.Network/virtualNetworks/subnets', parameters('existingVirtualNetworkName'), parameters('appGatewayPrivateIPSubnet'))]"
            }
          }
        }
      ]
    },
    "frontendport443Name": "[concat(parameters('deploymentPrefix'), 'EnterprisePort443')]",
    "frontendport80Name": "[concat(parameters('deploymentPrefix'), 'EnterprisePort80')]",
    "httpDeploymentListnerName": "[concat(parameters('deploymentPrefix'), 'HttpEnterpriseDeploymentListner')]",
    "httpsDeploymentListnerName": "[concat(parameters('deploymentPrefix'), 'HttpsEnterpriseDeploymentListner')]",
    "urlPathMapsName": "[concat(parameters('deploymentPrefix'), 'EnterprisePathMap')]",
    "redirectConfigurationName": "[concat(parameters('deploymentPrefix'), 'EnterpriseHttpToHttps')]",
    "requestRoutingRule": "[concat(parameters('deploymentPrefix'), 'EnterpriseRequestRoutingRule')]",
    "httpToHttpsRequestRoutingRule": "[concat(parameters('deploymentPrefix'), 'HttpToHttpsEnterpriseRequestRoutingRule')]",
    "serverBackendPoolName": "[concat(parameters('deploymentPrefix'), 'ServerBackendPool')]",
    "portalBackendPoolName": "[concat(parameters('deploymentPrefix'), 'PortalBackendPool')]",
    "portalBackendHttpsSettingName": "[concat(parameters('deploymentPrefix'), 'PortalHttpsSetting')]",
    "serverBackendHttpsSettingName": "[concat(parameters('deploymentPrefix'), 'ServerHttpsSetting')]",
    "serverRewriteRuleSetName": "[concat(parameters('deploymentPrefix'), 'ServerRewriteRuleSet')]",
    "portalRewriteRuleSetName": "[concat(parameters('deploymentPrefix'), 'PortalRewriteRuleSet')]",
    "serverBackendProbeName": "[concat(parameters('deploymentPrefix'), 'ServerProbeName')]",
    "portalBackendProbeName": "[concat(parameters('deploymentPrefix'), 'PortalProbeName')]",
    "dscExtensionArchiveFileName": "DSC.zip",
    "dscScriptFunction": "BaseDeploymentSingleTierConfiguration",
    "tileCacheDataStoreDscScriptFunction": "TileCacheDataStoreConfiguration",
    "spatiotemporalBigDataStoreDscScriptFunction": "SpatiotemporalBigDataStoreConfiguration",
    "cloudStorageAccountCredentialsPassword": {
      "false": "placeholder",
      "true": "[parameters('cloudStorageAccountKey')]"
    },
    "cloudStorageAccountCredentialsUserName": {
      "false": "placeholder",
      "true": "[concat(parameters('cloudStorageAccountName'),variables('environmentToBlobEndpoint')[parameters('environment')])]"
    },
    "jumpBoxName": "[concat(parameters('deploymentPrefix'), 'JumpBox')]",
    "jumpBoxNicName": "[concat(variables('jumpBoxName'),'-',variables('nicName'))]",
    "cloudStorageOption": {
      "true": "[concat(substring(parameters('externalDnsHostName'), 0, indexOf(parameters('externalDnsHostName'),'.')), '@', parameters('cloudStorageAccountName'), variables('environmentToBlobEndpoint')[parameters('environment')], '@', parameters('cloudStorageAccountResourceGroupName'), '@',string(parameters('useAzureFiles')))]",
      "false": ""
    },
    "enableSpatiotemporalBigDataStore": "[not(empty(parameters('spatiotemporalBigDataStoreVirtualMachineNames')))]",
    "enableSpatiotemporalBigDataStoreOnBaseDeploymentMachines": "[contains(parameters('dataStoreTypesForBaseDeploymentServers'), 'SpatioTemporal')]",
    "enableTileCacheDataStore": "[not(empty(parameters('tileCacheDataStoreVirtualMachineNames')))]",
    "enableTileCacheDataStoreOnBaseDeploymentMachines": "[contains(parameters('dataStoreTypesForBaseDeploymentServers'), 'TileCache')]",
    "omsWorkspace": {
      "true": "[concat(parameters('omsWorkspaceName'), '@', parameters('omsWorkspaceResourceGroupName'), '@', string(parameters('enableServerLogHarvesterPlugin')))]",
      "false": ""
    },
    "omsWorkspaceResourceId": "[if(and(not(empty(parameters('omsWorkspaceResourceGroupName'))),not(empty(parameters('omsWorkspaceName')))), resourceId(parameters('omsWorkspaceResourceGroupName'), 'Microsoft.OperationalInsights/workspaces/', parameters('omsWorkspaceName')),'')]",
    "vmRoleOption": "[concat('FileShare,Server,Portal,DataStore',if(equals(string(variables('enableTileCacheDataStoreOnBaseDeploymentMachines')),'True'),',TileCacheDataStore',''),if(equals(string(variables('enableSpatiotemporalBigDataStoreOnBaseDeploymentMachines')),'True'),',SpatiotemporalDataStore',''))]"
  },
  "resources": [
    {
      "apiVersion": "2018-05-01",
      "name": "[concat('pid-',parameters('deploymentTrackingID'))]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
          ]
        }
      }
    },
    {
      "condition": "[equals(string(parameters('enableRDPAccess')),'True')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressRDPResourceName')]",
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "Public IP Address - RDP (Optional)",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "scale": null,
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "idleTimeoutInMinutes": 4,
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsPrefixForPublicIpAddress'),'-rdp')]"
        }
      }
    },
    {
      "condition": "[equals(string(parameters('enableRDPAccess')),'True')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('jumpBoxNicName')]",
      "location": "[parameters('location')]",
      "apiVersion": "[variables('networkApiVersion')]",
      "tags": {
        "displayName": "RDP Jump Box Network Interface",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressRDPResourceName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "jumpbox-ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressRDPResourceName'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "condition": "[and(not(empty(parameters('adminPassword'))),equals(string(parameters('enableRDPAccess')),'True'))]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('jumpBoxName')]",
      "location": "[parameters('location')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "tags": {
        "displayName": "RDP Jump Box",
        "arcgis-deployment-id": "[variables('deploymentId')]",
        "arcgis-vm-roles": "RDPJumpBox"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('jumpBoxNicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_DS2_v2"
        },
        "osProfile": {
          "computerName": "[variables('jumpBoxName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
            "timeZone": "[parameters('timeZoneId')]"
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2019-Datacenter-smalldisk",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('jumpBoxName'),'-','OsDisk')]",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            },
            "diskSizeGB": 64,
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('jumpBoxNicName'))]"
            }
          ]
        }
      }
    },
    {
      "condition": "[and(equals(string(parameters('enableRDPAccess')),'True'),equals(string(parameters('enableAutoShutDown')),'True'))]",
      "apiVersion": "2018-09-15",
      "type": "Microsoft.DevTestLab/schedules",
      "name": "[concat('shutdown-computevm-', variables('jumpBoxName'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('jumpBoxName')]"
      ],
      "properties": {
          "status": "[if(equals(string(parameters('enableAutoShutDown')),'True'),'Enabled','Disabled')]",
          "timeZoneId": "[parameters('timeZoneId')]",
          "taskType": "ComputeVmShutdownTask",
          "notificationSettings":{
            "status": "Disabled",
            "timeInMinutes": 15,
            "webhookUrl": ""
          },
          "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines/', variables('jumpBoxName'))]",
          "dailyRecurrence":{
            "time": "[parameters('autoShutDownTime')]"
          }
      }
    },
    {
      "condition": "[and(equals(string(parameters('enableRDPAccess')),'True'),equals(string(parameters('joinWindowsDomain')),'True'))]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('jumpBoxName'),'/JoinDomain')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('jumpBoxName')]"
      ],
      "tags": {
        "displayName": "(Optional) Jumpbox Domain Join"
      },
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "JsonADDomainExtension",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "Name": "[parameters('windowsDomainName')]",
          "User": "[parameters('windowsDomainAdministratorUserName')]",
          "Restart": "true",
          "Options": 3
        },
        "protectedSettings": {
          "Password": "[parameters('windowsDomainAdministratorPassword')]"
        }
      }
    },
    {
      "condition": "[or(not(parameters('usesExistingPublicIP')),and(equals(string(parameters('usesPrivateIP')), 'True'),equals(string(parameters('deployPublicIPWhenUsingPrivateIP')), 'True')))]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[if(parameters('usesPrivateIP'),variables('unusedPublicIPWhenUsingPrivateIPResourceName'),variables('publicIPAddressResourceName'))]",
      "apiVersion": "[variables('computeApiVersion')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "Application Gateway Public IP Address",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "sku": {
        "name": "Standard"
      },
      "scale": null,
      "properties": {
        "publicIPAllocationMethod": "Static",
        "idleTimeoutInMinutes": 11,
        "dnsSettings": {
          "domainNameLabel": "[if(parameters('usesPrivateIP'),variables('unusedPublicIPPWhenUsingPrivateIPDnsPrefix'),parameters('dnsPrefixForPublicIpAddress'))]"
        }
      },
      "dependsOn": [
      ]
    },
    {
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('baseDeploymentAvailablitySetName')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "Base Deployment Availability Set",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "properties": {
        "platformUpdateDomainCount": 2,
        "platformFaultDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('virtualMachineNames')[copyIndex()], '-', variables('nicName'))]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "Network Interface",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "copy": {
        "name": "nic-copy",
        "count": "[variables('numberOfVirtualMachines')]"
      },
      "dependsOn": [
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "condition": "[not(empty(parameters('adminPassword')))]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('virtualMachineNames')[copyIndex()]]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vm-copy",
        "count": "[variables('numberOfVirtualMachines')]"
      },
      "tags": {
        "arcgis-vm-roles": "[variables('vmRoleOption')]",
        "arcgis-deployment-id": "[variables('deploymentId')]",
        "displayName": "Base Deployment Server"
      },
      "plan": "[if(equals(string(parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['UseManagedDiskImage']),'True'),json('null'),json(concat('{\"publisher\":\"',parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['Publisher'],'\",\"product\":\"',parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['Offer'],'\",\"name\":\"',parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['SKU'],'\"}')))]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('virtualMachineNames')[copyIndex()], '-', variables('nicName'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('baseDeploymentAvailablitySetName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('baseDeploymentAvailablitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('virtualMachineSize')]"
        },
        "osProfile": {
          "computername": "[variables('virtualMachineNames')[copyIndex()]]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
            "timeZone": "[parameters('timeZoneId')]"
          }
        },
        "storageProfile": {
          "imageReference": "[if(equals(string(parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['UseManagedDiskImage']),'True'),json(concat('{\"id\":\"',resourceid(string(parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['UserImageResourceGroupName']),'Microsoft.Compute/images',string(parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['UserImageName'])),'\"}')),json(concat('{\"publisher\":\"',parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['Publisher'],'\",\"offer\":\"',parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['Offer'],'\",\"sku\":\"',parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['SKU'],'\",\"version\":\"latest\"}')))]",
          "osDisk": {
            "name": "[concat(variables('virtualMachineNames')[copyIndex()],'-','OSDisk')]",
            "managedDisk": {
              "storageAccountType": "[parameters('virtualMachineOSDiskType')]"
            },
            "diskSizeGB": "[parameters('virtualMachineOSDiskSize')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": "[if(equals(string(parameters('enableVirtualMachineDataDisk')),'True'), json(concat('[{\"name\":\"', concat(variables('virtualMachineNames')[copyIndex()],'-','DataDisk'), '\", \"lun\": 0, \"createOption\": \"empty\", \"diskSizeGB\": \"', parameters('virtualMachineDataDiskSize'), '\", \"managedDisk\": { \"storageAccountType\":\"', parameters('virtualMachineDataDiskType') ,'\"} }]')), json('null'))]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('virtualMachineNames')[copyIndex()], '-',variables('nicName')))]"
            }
          ]
        }
      }
    },
    {
      "condition": "[equals(string(parameters('enableAutoShutDown')), 'True')]",
      "apiVersion": "2018-09-15",
      "type": "Microsoft.DevTestLab/schedules",
      "name": "[toLower(concat('shutdown-computevm-', variables('virtualMachineNames')[copyIndex()]))]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "baseDeploymentServerAutoShutDownCopy",
        "count": "[length(variables('virtualMachineNames'))]"
      },
      "dependsOn": [
        "[variables('virtualMachineNames')[copyIndex()]]"
      ],
      "properties": {
        "status": "[if(equals(string(parameters('enableAutoShutDown')),'True'),'Enabled','Disabled')]",
        "timeZoneId": "[parameters('timeZoneId')]",
        "taskType": "ComputeVmShutdownTask",
        "notificationSettings":{
          "status": "Disabled",
          "timeInMinutes": 15,
          "webhookUrl": ""
        },
        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines/', variables('virtualMachineNames')[copyIndex()])]",
        "dailyRecurrence":{
          "time": "[parameters('autoShutDownTime')]"
        }
      }
    },
    {
      "condition": "[equals(string(parameters('joinWindowsDomain')), 'True')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('virtualMachineNames')[copyIndex()],'/JoinDomain')]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "baseDeploymentServerDomainJoinCopy",
        "count": "[length(variables('virtualMachineNames'))]"
      },
      "dependsOn": [
        "[variables('virtualMachineNames')[copyIndex()]]"
      ],
      "tags": {
        "displayName": "(Optional) Base Deployment Server Domain Join"
      },
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "JsonADDomainExtension",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "Name": "[parameters('windowsDomainName')]",
          "User": "[parameters('windowsDomainAdministratorUserName')]",
          "Restart": "true",
          "Options": 3
        },
        "protectedSettings": {
          "Password": "[parameters('windowsDomainAdministratorPassword')]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "condition": "[and(not(empty(parameters('omsWorkspaceResourceGroupName'))),not(empty(parameters('omsWorkspaceName'))))]",
      "name": "[concat(variables('virtualMachineNames')[copyIndex()],'/LogAnalytics')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vm-copy",
        "count": "[variables('numberOfVirtualMachines')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('virtualMachineNames')[copyIndex()])]"
      ],
      "properties": {
        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
        "type": "MicrosoftMonitoringAgent",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "workspaceId": "[if(not(empty(variables('omsWorkspaceResourceId'))),reference(variables('omsWorkspaceResourceId'),'2015-11-01-preview').customerId ,json('null'))]"
        },
        "protectedSettings": {
          "workspaceKey": "[if(not(empty(variables('omsWorkspaceResourceId'))),listKeys(variables('omsWorkspaceResourceId'),'2015-11-01-preview').primarySharedKey ,json('null'))]"
        }
      }
    },
    {
      "name": "[concat('generateSSLCertificatesCustomExtension-',deployment().name)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2018-05-01",
      "dependsOn": [
        "baseDeploymentServerDomainJoinCopy"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'),'/','generatecertificate-cse.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "vmName": {
            "value": "[variables('virtualMachineNames')[0]]"
          },
          "fileUris": {
            "value": [
              "[concat(parameters('_artifactsLocation'),'/',variables('generateSSLCertsFileName'), parameters('_artifactsLocationSasToken'))]"
            ]
          },
          "commandToExecute": {
            "value": "[concat('powershell -ExecutionPolicy Unrestricted -File .\\',variables('generateSSLCertsFileName'),' -OverrideCertificates \"false\" -CertificatePassword ',parameters('selfSignedSSLCertificatePassword'),' -ServerMachineNames ',parameters('virtualMachineNames'),' -PortalMachineNames ',parameters('virtualMachineNames'),' -FileShareName ',parameters('fileShareName'))]"
          }
        }
      }
    },
    {
      "condition": "[equals(string(parameters('enableRDPAccess')),'True')]",
      "apiVersion": "2018-05-01",
      "name": "[concat('fetchIpAddress-',deployment().name)]",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressRDPResourceName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('jumpBoxNicName'))]",
        "[concat('Microsoft.Compute/virtualMachines/', variables('jumpBoxName'))]",
        "[concat('Microsoft.Resources/deployments/', 'generateSSLCertificatesCustomExtension-', deployment().name)]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'),'/','fetchIpAddress.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "publicIPAddressId": {
            "value": "[resourceId('Microsoft.Network/publicIpAddresses', variables('publicIPAddressRDPResourceName'))]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2018-05-01",
      "name": "[concat('appGatewayNestedDeployment-',deployment().name)]",
      "resourceGroup": "[parameters('appGatewayResourceGroupName')]",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'fetchIpAddress-', deployment().name)]",
        "[concat('Microsoft.Resources/deployments/', 'generateSSLCertificatesCustomExtension-', deployment().name)]"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
          },
          "variables": {
          },
          "resources": [
            {
              "type": "Microsoft.Network/applicationGateways",
              "apiVersion": "2019-04-01",
              "name": "[parameters('appGatewayName')]",
              "location": "[parameters('location')]",
              "tags": APPGATEWAYTAGS,
              "properties": APPGATEWAYPROPERTIESOBJECT
            }
          ]
        },
        "parameters": {
        }
      }
    },
    {
      "name": "[concat(variables('virtualMachineNames')[copyIndex()],'/DSCConfiguration',copyIndex())]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[parameters('location')]",
      "copy": {
        "name": "DSC-copy",
        "count": "[variables('numberOfVirtualMachines')]",
        "mode": "serial"
      },
      "tags": {
        "displayName": "DSC Script"
      },
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'appGatewayNestedDeployment-',deployment().name)]"
      ],
      "apiVersion": "[variables('computeApiVersion')]",
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.77",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "wmfVersion": "latest",
          "configuration": {
            "url": "[concat(parameters('_artifactsLocation'), '/', variables('dscExtensionArchiveFileName'))]",
            "function": "[variables('dscScriptFunction')]",
            "script": "[concat(variables('dscScriptFunction'), '.ps1')]"
          },
          "advancedOptions": {
            "forcePullAndApply": false
          },
          "configurationArguments": {
            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
            "ServerLicenseFileUrl": "[if(empty(parameters('serverLicenseFileUrl')),if(empty(parameters('serverLicenseFileName')), '', concat(parameters('_artifactsLocation'), '/', parameters('serverLicenseFileName'), parameters('_artifactsLocationSasToken'))), parameters('serverLicenseFileUrl'))]",
            "PortalLicenseFileUrl": "[if(empty(parameters('portalLicenseFileUrl')),if(empty(parameters('portalLicenseFileName')), '', concat(parameters('_artifactsLocation'), '/', parameters('portalLicenseFileName'), parameters('_artifactsLocationSasToken'))), parameters('portalLicenseFileUrl'))]",
            "PortalLicenseUserTypeId": "[if(empty(parameters('portalLicenseUserTypeId')),'',parameters('portalLicenseUserTypeId'))]",
            "MachineName": "[first(variables('virtualMachineNames'))]",
            "PeerMachineName": "[last(variables('virtualMachineNames'))]",
            "ExternalDNSHostName": "[parameters('externalDnsHostName')]",
            "DataStoreTypes": "[parameters('dataStoreTypesForBaseDeploymentServers')]",
            "IsTileCacheDataStoreClustered": "[parameters('isTileCacheDataStoreClustered')]",
            "FileShareName": "[parameters('fileShareName')]",
            "UseCloudStorage": "[parameters('useCloudStorage')]",
            "UseAzureFiles": "[parameters('useAzureFiles')]",
            "OSDiskSize": "[parameters('virtualMachineOSDiskSize')]",
            "EnableDataDisk": "[string(parameters('enableVirtualMachineDataDisk'))]",
            "EnableLogHarvesterPlugin": "[string(parameters('enableServerLogHarvesterPlugin'))]",
            "DebugMode": "[string(parameters('debugMode'))]",
            "ServerContext": "[parameters('serverContext')]",
            "PortalContext": "[parameters('portalContext')]"
          }
        },
        "protectedSettings": {
          "configurationUrlSasToken": "[parameters('_artifactsLocationSasToken')]",
          "configurationArguments": {
            "ServiceCredential": {
              "userName": "[if(empty(parameters('arcgisServiceAccountUserName')),'PlaceHolder', parameters('arcgisServiceAccountUserName'))]",
              "password": "[if(empty(parameters('arcgisServiceAccountPassword')),'PlaceHolder', parameters('arcgisServiceAccountPassword'))]"
            },
            "MachineAdministratorCredential": {
              "userName": "[if(empty(parameters('adminUsername')),'PlaceHolder', parameters('adminUsername'))]",
              "password": "[if(empty(parameters('adminPassword')),'PlaceHolder', parameters('adminPassword'))]"
            },
            "SelfSignedSSLCertificatePassword": {
              "userName": "PlaceHolder",
              "password": "[if(empty(parameters('selfSignedSSLCertificatePassword')),'PlaceHolder', parameters('selfSignedSSLCertificatePassword'))]"
            },
            "SiteAdministratorCredential": {
              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
            },
            "StorageAccountCredential": {
              "userName": "[variables('cloudStorageAccountCredentialsUserName')[string(parameters('useCloudStorage'))]]",
              "password": "[variables('cloudStorageAccountCredentialsPassword')[string(parameters('useCloudStorage'))]]"
            }
          }
        }
      }
    },
    {
      "condition": "[equals(string(variables('enableTileCacheDataStore')),'True')]",
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('tileCacheDataStoreAvailablitySetName')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "(Optional) Tile Cache Data Store Availability Set",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "properties": {
        "platformUpdateDomainCount": 2,
        "platformFaultDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "condition": "[equals(string(variables('enableTileCacheDataStore')),'True')]",
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('tileCacheDataStoreVirtualMachineNameOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()], '-', variables('nicName'))]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "nic-copy",
        "count": "[variables('numberOfTileCacheDataStoreVirtualMachines')]"
      },
      "tags": {
        "displayName": "(Optional) Tile Cache Data Store Network Interfaces",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "dependsOn": [
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "condition": "[and(not(empty(parameters('adminPassword'))), equals(string(variables('enableTileCacheDataStore')),'True'))]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('tileCacheDataStoreVirtualMachineNameOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()]]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vm-copy",
        "count": "[variables('numberOfTileCacheDataStoreVirtualMachines')]"
      },
      "tags": {
        "arcgis-vm-roles": "TileCacheDataStore",
        "arcgis-deployment-id": "[variables('deploymentId')]",
        "displayName": "(Optional) Tile Cache Data Store Virtual Machines"
      },
      "plan": "[if(equals(string(parameters('imageReferences')[string(variables('tileCacheDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()])]['UseManagedDiskImage']),'True'),json('null'),json(concat('{\"publisher\":\"',parameters('imageReferences')[string(variables('tileCacheDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()])]['Publisher'],'\",\"product\":\"',parameters('imageReferences')[string(variables('tileCacheDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()])]['Offer'],'\",\"name\":\"',parameters('imageReferences')[string(variables('tileCacheDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()])]['SKU'],'\"}')))]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('tileCacheDataStoreVirtualMachineNameOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()], '-', variables('nicName'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('tileCacheDataStoreAvailablitySetName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('tileCacheDataStoreAvailablitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('tileCacheDataStoreVirtualMachineSize')]"
        },
        "osProfile": {
          "computername": "[variables('tileCacheDataStoreVirtualMachineNameOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()]]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
            "timeZone": "[parameters('timeZoneId')]"
          }
        },
        "storageProfile": {
          "imageReference": "[if(equals(string(parameters('imageReferences')[string(variables('tileCacheDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()])]['UseManagedDiskImage']),'True'),json(concat('{\"id\":\"',resourceid(string(parameters('imageReferences')[string(variables('tileCacheDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()])]['UserImageResourceGroupName']),'Microsoft.Compute/images',string(parameters('imageReferences')[string(variables('tileCacheDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()])]['UserImageName'])),'\"}')),json(concat('{\"publisher\":\"',parameters('imageReferences')[string(variables('tileCacheDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()])]['Publisher'],'\",\"offer\":\"',parameters('imageReferences')[string(variables('tileCacheDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()])]['Offer'],'\",\"sku\":\"',parameters('imageReferences')[string(variables('tileCacheDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()])]['SKU'],'\",\"version\":\"latest\"}')))]",
          "osDisk": {
            "name": "[concat(variables('tileCacheDataStoreVirtualMachineNames')[copyIndex()],'-','OSDisk')]",
            "managedDisk": {
              "storageAccountType": "[parameters('tileCacheDataStoreVirtualMachineOSDiskType')]"
            },
            "diskSizeGB": "[parameters('tileCacheDataStoreVirtualMachineOSDiskSize')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": "[if(equals(string(parameters('enableTileCacheDataStoreVirtualMachineDataDisk')),'True'), json(concat('[{\"name\":\"', concat(variables('tileCacheDataStoreVirtualMachineNames')[copyIndex()],'-','DataDisk'), '\", \"lun\": 0, \"createOption\": \"empty\", \"diskSizeGB\": \"', parameters('tileCacheDataStoreVirtualMachineDataDiskSize'), '\", \"managedDisk\": { \"storageAccountType\":\"', parameters('tileCacheDataStoreVirtualMachineDataDiskType') ,'\"} }]')), json('null'))]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('tileCacheDataStoreVirtualMachineNames')[copyIndex()], '-',variables('nicName')))]"
            }
          ]
        }
      }
    },
    {
      "condition": "[and(equals(string(variables('enableTileCacheDataStore')),'True'), equals(string(parameters('enableAutoShutDown')), 'True'))]",
      "apiVersion": "2018-09-15",
      "type": "Microsoft.DevTestLab/schedules",
      "name": "[concat('shutdown-computevm-', variables('tileCacheDataStoreVirtualMachineNames')[copyIndex()])]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "tileCacheAutoShutDownCopy",
        "count": "[length(variables('tileCacheDataStoreVirtualMachineNames'))]"
      },
      "dependsOn": [
        "[variables('tileCacheDataStoreVirtualMachineNameOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()]]"
      ],
      "properties": {
        "status": "[if(equals(string(parameters('enableAutoShutDown')),'True'),'Enabled','Disabled')]",
        "timeZoneId": "[parameters('timeZoneId')]",
        "taskType": "ComputeVmShutdownTask",
        "notificationSettings":{
          "status": "Disabled",
          "timeInMinutes": 15,
          "webhookUrl": ""
        },
        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines/', variables('tileCacheDataStoreVirtualMachineNames')[copyIndex()])]",
        "dailyRecurrence":{
          "time": "[parameters('autoShutDownTime')]"
        }
      }
    },
    {
      "condition": "[and(equals(string(variables('enableTileCacheDataStore')),'True'), equals(string(parameters('joinWindowsDomain')), 'True'))]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('tileCacheDataStoreVirtualMachineNameOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()],'/JoinDomain', copyIndex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "tileCacheDataStoreDomainJoinCopy",
        "count": "[length(variables('tileCacheDataStoreVirtualMachineNames'))]"
      },
      "dependsOn": [
        "[variables('tileCacheDataStoreVirtualMachineNameOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()]]"
      ],
      "tags": {
        "displayName": "(Optional) Tile Cache Store Domain Join"
      },
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "JsonADDomainExtension",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "Name": "[parameters('windowsDomainName')]",
          "User": "[parameters('windowsDomainAdministratorUserName')]",
          "Restart": "true",
          "Options": 3
        },
        "protectedSettings": {
          "Password": "[parameters('windowsDomainAdministratorPassword')]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "condition": "[and(and(not(empty(parameters('omsWorkspaceResourceGroupName'))),not(empty(parameters('omsWorkspaceName')))), variables('enableTileCacheDataStore'))]",
      "name": "[concat(variables('tileCacheDataStoreVirtualMachineNameOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()],'/LogAnalytics')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vm-copy",
        "count": "[variables('numberOfTileCacheDataStoreVirtualMachines')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('tileCacheDataStoreVirtualMachineNameOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()])]"
      ],
      "properties": {
        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
        "type": "MicrosoftMonitoringAgent",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "workspaceId": "[if(not(empty(variables('omsWorkspaceResourceId'))),reference(variables('omsWorkspaceResourceId'),'2015-11-01-preview').customerId ,json('null'))]"
        },
        "protectedSettings": {
          "workspaceKey": "[if(not(empty(variables('omsWorkspaceResourceId'))),listKeys(variables('omsWorkspaceResourceId'),'2015-11-01-preview').primarySharedKey ,json('null'))]"
        }
      }
    },
    {
      "condition": "[equals(string(variables('enableTileCacheDataStore')),'True')]",
      "name": "[concat(variables('tileCacheDataStoreVirtualMachineNameOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()],'/DSCConfiguration',copyIndex())]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[parameters('location')]",
      "copy": {
        "name": "DSC-copy",
        "count": "[variables('numberOfTileCacheDataStoreVirtualMachines')]",
        "mode": "serial"
      },
      "tags": {
        "displayName": "(Optional) Tile Cache Store DSC Scripts"
      },
      "dependsOn": [
        "[concat(resourceId('Microsoft.Compute/VirtualMachines', concat(first(variables('virtualMachineNames')))),'/extensions/DSCConfiguration0')]",
        "[variables('tileCacheDataStoreVirtualMachineNameOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()]]"
      ],
      "apiVersion": "[variables('computeApiVersion')]",
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.77",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "wmfVersion": "latest",
          "configuration": {
            "url": "[concat(parameters('_artifactsLocation'), '/', variables('dscExtensionArchiveFileName'))]",
            "function": "[variables('tileCacheDataStoreDscScriptFunction')]",
            "script": "[concat(variables('tileCacheDataStoreDscScriptFunction'), '.ps1')]"
          },
          "advancedOptions": {
            "forcePullAndApply": false
          },
          "configurationArguments": {
            "IsTileCacheDataStoreClustered": "[parameters('isTileCacheDataStoreClustered')]",
            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
            "TileCacheDataStoreMachineNames": "[parameters('tileCacheDataStoreVirtualMachineNames')]",
            "IsMultiMachineTileCache":"[parameters('isMultiMachineTileCacheDataStore')]",
            "FileShareMachineName": "[first(variables('virtualMachineNames'))]",
            "FileShareName": "[parameters('fileShareName')]",
            "ServerMachineNames": "[parameters('virtualMachineNames')]",
            "OSDiskSize": "[parameters('tileCacheDataStoreVirtualMachineOSDiskSize')]",
            "EnableDataDisk": "[string(parameters('enableTileCacheDataStoreVirtualMachineDataDisk'))]",
            "DebugMode": "[string(parameters('debugMode'))]"
          }
        },
        "protectedSettings": {
          "configurationUrlSasToken": "[parameters('_artifactsLocationSasToken')]",
          "configurationArguments": {
            "ServiceCredential": {
              "userName": "[if(empty(parameters('arcgisServiceAccountUserName')),'PlaceHolder', parameters('arcgisServiceAccountUserName'))]",
              "password": "[if(empty(parameters('arcgisServiceAccountPassword')),'PlaceHolder', parameters('arcgisServiceAccountPassword'))]"
            },
            "SiteAdministratorCredential": {
              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
            }
          }
        }
      }
    },
    {
      "condition": "[equals(string(variables('enableSpatiotemporalBigDataStore')),'True')]",
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('spatiotemporalBigDataStoreAvailablitySetName')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "(Optional) Big Data Store Availability Set",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "properties": {
        "platformUpdateDomainCount": 2,
        "platformFaultDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "condition": "[equals(string(variables('enableSpatiotemporalBigDataStore')),'True')]",
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()], '-', variables('nicName'))]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "nic-copy",
        "count": "[variables('numberOfSpatiotemporalBigDataStoreVirtualMachines')]"
      },
      "tags": {
        "displayName": "(Optional) Big Data Store Network Interfaces",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "dependsOn": [
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "condition": "[and(not(empty(parameters('adminPassword'))), equals(string(variables('enableSpatiotemporalBigDataStore')),'True'))]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()]]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vm-copy",
        "count": "[variables('numberOfSpatiotemporalBigDataStoreVirtualMachines')]"
      },
      "tags": {
        "arcgis-vm-roles": "SpatiotemporalDataStore",
        "arcgis-deployment-id": "[variables('deploymentId')]",
        "displayName": "(Optional) Big Data Store Virtual Machines"
      },
      "plan": "[if(equals(string(parameters('imageReferences')[string(variables('spatiotemporalBigDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]['UseManagedDiskImage']),'True'),json('null'),json(concat('{\"publisher\":\"',parameters('imageReferences')[string(variables('spatiotemporalBigDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]['Publisher'],'\",\"product\":\"',parameters('imageReferences')[string(variables('spatiotemporalBigDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]['Offer'],'\",\"name\":\"',parameters('imageReferences')[string(variables('spatiotemporalBigDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]['SKU'],'\"}')))]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()], '-', variables('nicName'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('spatiotemporalBigDataStoreAvailablitySetName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('spatiotemporalBigDataStoreAvailablitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('spatiotemporalBigDataStoreVirtualMachineSize')]"
        },
        "osProfile": {
          "computername": "[variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()]]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
            "timeZone": "[parameters('timeZoneId')]"
          }
        },
        "storageProfile": {
          "imageReference": "[if(equals(string(parameters('imageReferences')[string(variables('spatiotemporalBigDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]['UseManagedDiskImage']),'True'),json(concat('{\"id\":\"',resourceid(string(parameters('imageReferences')[string(variables('spatiotemporalBigDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]['UserImageResourceGroupName']),'Microsoft.Compute/images',string(parameters('imageReferences')[string(variables('spatiotemporalBigDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]['UserImageName'])),'\"}')),json(concat('{\"publisher\":\"',parameters('imageReferences')[string(variables('spatiotemporalBigDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]['Publisher'],'\",\"offer\":\"',parameters('imageReferences')[string(variables('spatiotemporalBigDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]['Offer'],'\",\"sku\":\"',parameters('imageReferences')[string(variables('spatiotemporalBigDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]['SKU'],'\",\"version\":\"latest\"}')))]",
          "osDisk": {
            "name": "[concat(variables('spatiotemporalBigDataStoreVirtualMachineNames')[copyIndex()],'-','OSDisk')]",
            "managedDisk": {
              "storageAccountType": "[parameters('spatiotemporalBigDataStoreVirtualMachineOSDiskType')]"
            },
            "diskSizeGB": "[parameters('spatiotemporalBigDataStoreVirtualMachineOSDiskSize')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": "[if(equals(string(parameters('enableSpatiotemporalBigDataStoreVirtualMachineDataDisk')),'True'), json(concat('[{\"name\":\"', concat(variables('spatiotemporalBigDataStoreVirtualMachineNames')[copyIndex()],'-','DataDisk'), '\", \"lun\": 0, \"createOption\": \"empty\", \"diskSizeGB\": \"', parameters('spatiotemporalBigDataStoreVirtualMachineDataDiskSize'), '\", \"managedDisk\": { \"storageAccountType\":\"', parameters('spatiotemporalBigDataStoreVirtualMachineDataDiskType') ,'\"} }]')), json('null'))]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('spatiotemporalBigDataStoreVirtualMachineNames')[copyIndex()], '-',variables('nicName')))]"
            }
          ]
        }
      }
    },
    {
      "condition": "[and(equals(string(variables('enableSpatiotemporalBigDataStore')),'True'), equals(string(parameters('enableAutoShutDown')), 'True'))]",
      "apiVersion": "2018-09-15",
      "type": "Microsoft.DevTestLab/schedules",
      "name": "[concat('shutdown-computevm-', variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "spatioTemporalAutoShutDownCopy",
        "count": "[variables('numberOfSpatiotemporalBigDataStoreVirtualMachines')]"
      },
      "dependsOn": [
        "[variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()]]"
      ],
      "properties": {
        "status": "[if(equals(string(parameters('enableAutoShutDown')),'True'),'Enabled','Disabled')]",
        "timeZoneId": "[parameters('timeZoneId')]",
        "taskType": "ComputeVmShutdownTask",
        "notificationSettings":{
          "status": "Disabled",
          "timeInMinutes": 15,
          "webhookUrl": ""
        },
        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines/', variables('spatiotemporalBigDataStoreVirtualMachineNames')[copyIndex()])]",
        "dailyRecurrence":{
          "time": "[parameters('autoShutDownTime')]"
        }
      }
    },
    {
      "condition": "[and(equals(string(variables('enableSpatiotemporalBigDataStore')),'True'), equals(string(parameters('joinWindowsDomain')), 'True'))]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()],'/JoinDomain', copyIndex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "bigDataStoreDomainJoinCopy",
        "count": "[length(variables('spatiotemporalBigDataStoreVirtualMachineNames'))]"
      },
      "dependsOn": [
        "[variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()]]"
      ],
      "tags": {
        "displayName": "(Optional) Big Data Store Domain Join"
      },
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "JsonADDomainExtension",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "Name": "[parameters('windowsDomainName')]",
          "User": "[parameters('windowsDomainAdministratorUserName')]",
          "Restart": "true",
          "Options": 3
        },
        "protectedSettings": {
          "Password": "[parameters('windowsDomainAdministratorPassword')]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "condition": "[and(and(not(empty(parameters('omsWorkspaceResourceGroupName'))),not(empty(parameters('omsWorkspaceName')))), variables('enableSpatiotemporalBigDataStore'))]",
      "name": "[concat(variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()],'/LogAnalytics')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vm-copy",
        "count": "[variables('numberOfSpatiotemporalBigDataStoreVirtualMachines')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]"
      ],
      "properties": {
        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
        "type": "MicrosoftMonitoringAgent",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "workspaceId": "[if(not(empty(variables('omsWorkspaceResourceId'))),reference(variables('omsWorkspaceResourceId'),'2015-11-01-preview').customerId ,json('null'))]"
        },
        "protectedSettings": {
          "workspaceKey": "[if(not(empty(variables('omsWorkspaceResourceId'))),listKeys(variables('omsWorkspaceResourceId'),'2015-11-01-preview').primarySharedKey ,json('null'))]"
        }
      }
    },
    {
      "condition": "[equals(string(variables('enableSpatiotemporalBigDataStore')),'True')]",
      "name": "[concat(variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()],'/DSCConfiguration',copyIndex())]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[parameters('location')]",
      "copy": {
        "name": "DSC-copy",
        "count": "[variables('numberOfSpatiotemporalBigDataStoreVirtualMachines')]",
        "mode": "serial"
      },
      "tags": {
        "displayName": "(Optional) Big Data Store DSC Scripts"
      },
      "dependsOn": [
        "[concat(resourceId('Microsoft.Compute/VirtualMachines', concat(first(variables('virtualMachineNames')))),'/extensions/DSCConfiguration0')]",
        "[variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()]]"
      ],
      "apiVersion": "[variables('computeApiVersion')]",
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.77",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "wmfVersion": "latest",
          "configuration": {
            "url": "[concat(parameters('_artifactsLocation'), '/', variables('dscExtensionArchiveFileName'))]",
            "function": "[variables('spatiotemporalBigDataStoreDscScriptFunction')]",
            "script": "[concat(variables('spatiotemporalBigDataStoreDscScriptFunction'), '.ps1')]"
          },
          "advancedOptions": {
            "forcePullAndApply": false
          },
          "configurationArguments": {
            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
            "SpatiotemporalBigDataStoreMachineNames": "[parameters('spatiotemporalBigDataStoreVirtualMachineNames')]",
            "FileShareMachineName": "[first(variables('virtualMachineNames'))]",
            "FileShareName": "[parameters('fileShareName')]",
            "ServerMachineNames": "[parameters('virtualMachineNames')]",
            "OSDiskSize": "[parameters('spatiotemporalBigDataStoreVirtualMachineOSDiskSize')]",
            "EnableDataDisk": "[string(parameters('enableSpatiotemporalBigDataStoreVirtualMachineDataDisk'))]",
            "DebugMode": "[string(parameters('debugMode'))]"
          }
        },
        "protectedSettings": {
          "configurationUrlSasToken": "[parameters('_artifactsLocationSasToken')]",
          "configurationArguments": {
            "ServiceCredential": {
              "userName": "[if(empty(parameters('arcgisServiceAccountUserName')),'PlaceHolder', parameters('arcgisServiceAccountUserName'))]",
              "password": "[if(empty(parameters('arcgisServiceAccountPassword')),'PlaceHolder', parameters('arcgisServiceAccountPassword'))]"
            },
            "SiteAdministratorCredential": {
              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
            }
          }
        }
      }
    }
  ]
}