{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "deploymentPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Prefix applied to all resources provisioned as part of this template"
      },
      "maxLength": 3
    },
    "dnsPrefixForPublicIpAddress": {
      "type": "string",
      "maxLength": 80,
      "metadata": {
        "description": "DNS name for the Public IP address resource asociated with the site deployment. It needs to be unique across the region of deployment"
      }
    },
    "externalDnsHostName": {
      "type": "string",
      "metadata": {
        "description": "DNS name for the site deployment. It will be a custom domain (e.g. mysite.contoso.com) if using an SSL certificate, otherwise will be the Azure DNS <dnsPrefixForPublicIpAddress>.<location>.cloudapp.azure.com"
      }
    },
    "loadBalancerSKU": {
      "type": "string",
      "allowedValues": [
        "Basic",
        "Standard"
      ],
      "defaultValue": "Basic",
      "metadata": {
        "description": "Name of a load balancer SKU. - Basic or Standard"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "eastus",
      "metadata": {
        "description": "Azure Region for the site deployment. All Resources provisioned are created here"
      }
    },
    "deploymentTimestamp": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "An optional timestamp used to record as a tag which is used by ArcGIS Deployment Tools"
      }
    },
    "virtualNetworkResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Resource Group for the existing Virtual Network specified with the 'existingVirtualNetworkName' parameter"
      }
    },
    "existingVirtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing Virtual Network"
      }
    },
    "subnetName": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing Subnet within the Virtual Network specified with the 'existingVirtualNetworkName' parameter"
      }
    },
    "virtualMachineNames": {
      "type": "string",
      "metadata": {
        "description": "Comma seperated list of names for the Virtual Machines. A maximum of 2 names may be specified for the single tier base deployment"
      }
    },
    "virtualMachineImageSpecs": {
      "type": "string",
      "metadata": {
        "description": "Comma seperated list of Image Type used refrencing useManagedDiskImage,userImageName,userImageResourceGroupName,imagePublisher,imageOffery and imageSKU by index"
      }
    },
    "spatiotemporalBigdataStoreVirtualMachineNames": {
      "type": "string",
      "metadata": {
        "description": "Comma seperated list of virtual machine names for the Spatiotemporal Big Data Store Tier"
      },
      "defaultValue": ""
    },
    "spatiotemporalBigDataStoreVirtualMachineImageSpecs": {
      "type": "string",
      "metadata": {
        "description": "Comma seperated list of Image Type used refrencing useManagedDiskImage,userImageName,userImageResourceGroupName,imagePublisher,imageOffery and imageSKU by index"
      },
      "defaultValue": ""
    },
    "virtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_DS3_v2",
      "metadata": {
        "description": "Machine size assigned to the the Virtual Machine(s)"
      }
    },
    "spatiotemporalBigDataStoreVirtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_DS3_v2",
      "metadata": {
        "description": "Virtual Machine Size for the Spatiotemporal Big Data Store tier of machines"
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Username for the Virtual Machine Administrator (Windows) Account"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Password for the Virtual Machine Administrator (Windows) Account"
      }
    },
    "arcgisServiceAccountUserName": {
      "type": "string",
      "metadata": {
        "description": "User name for the ArcGIS (Windows) Service Account"
      },
      "defaultValue": "arcgis"
    },
    "arcgisServiceAccountPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the ArcGIS (Windows) Service Account"
      },
      "defaultValue": ""
    },
    "primarySiteAdministratorAccountUserName": {
      "type": "string",
      "metadata": {
        "description": "User name for the ArcGIS Server Site Primary Site Administrator"
      },
      "defaultValue": "siteadmin"
    },
    "primarySiteAdministratorAccountPassword": {
      "type": "securestring",
      "metadata": {
        "description": "User name for the ArcGIS Server Site Primary Site Administrator"
      }
    },
    "serverLicenseFileUrl": {
      "type": "string",
      "metadata": {
        "description": "Accessible file path for ArcGIS Server License"
      },
      "defaultValue": ""
    },
    "serverLicenseFileName": {
      "type": "string",
      "metadata": {
        "description": "File name for the ArcGIS Server License"
      },
      "defaultValue": ""
    },
    "portalLicenseFileUrl": {
      "type": "string",
      "metadata": {
        "description": "Accessible file path for Portal for ArcGIS License"
      },
      "defaultValue": ""
    },
    "portalLicenseFileName": {
      "type": "string",
      "metadata": {
        "description": "File name for the Portal for ArcGIS License"
      },
      "defaultValue": ""
    },
    "portalLicenseUserType": {
      "type": "string",
      "metadata": {
        "description": "Portal for ArcGIS License User Type to be used to Configure Portal Site"
      },
      "defaultValue": ""
    },
    "sslCertificateFileUrl": {
      "type": "string",
      "metadata": {
        "description": "Accessible file path for SSL Certificate"
      },
      "defaultValue": ""
    },
    "sslCertificateFileName": {
      "type": "string",
      "metadata": {
        "description": "File name for the SSL Certificate"
      },
      "defaultValue": ""
    },
    "sslCertificatePassword": {
      "type": "securestring",
      "metadata": {
        "description": "Private Key for the SSL Certificate"
      },
      "defaultValue": ""
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "(SAS) Shared Access Token for the deployment artifacts in an Azure Blob Storage Container"
      },
      "defaultValue": ""
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "Fully qualified URL for the deployment artifacts location in an Azure Blob Storage Container"
      },
      "defaultValue": ""
    },
    "virtualMachineOSDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [ "Premium_LRS", "Standard_LRS", "StandardSSD_LRS", "UltraSSD_LRS" ],
      "metadata": {
        "description": "(Optional) Managed Disk Type for the Operating System (c Drive) Disk for the Virtual Machine(s)"
      }
    },
    "spatiotemporalBigDataStoreVirtualMachineOSDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [ "Premium_LRS", "Standard_LRS", "StandardSSD_LRS", "UltraSSD_LRS" ],
      "metadata": {
        "description": "Managed Disk Type for the Operating System (c Drive) Disk for the Spatiotemporal Big Data Store tier of Virtual Machines"
      }
    },
    "virtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 64,
      "allowedValues": [ 64, 128, 512, 1024, 2048, 4096, 8192, 16384, 32767 ],
      "metadata": {
        "description": "(Optional) Managed Disk Size for the Operating System (c Drive) Disk for the Virtual Machine(s)"
      }
    },
    "spatiotemporalBigDataStoreVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [ 64, 128, 512, 1024, 2048, 4096, 8192, 16384, 32767 ],
      "metadata": {
        "description": "(Optional) Managed Disk Size for the Operating System (c Drive) Disk for the Portal tier of Virtual Machines"
      }
    },
    "enableVirtualMachineDataDisk": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether an additional Managed Disk is attached to the Virtual Machine(s)"
      }
    },
    "enableSpatiotemporalBigDataStoreVirtualMachineDataDisk": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether an additional Managed Disk is attached to the Spatiotemporal Big Data Store tier of Virtual Machines"
      }
    },
    "virtualMachineDataDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [ "Premium_LRS", "Standard_LRS", "StandardSSD_LRS", "UltraSSD_LRS" ],
      "metadata": {
        "description": "(Optional) Managed disk type for the additional (Data) disk attached to the Virtual Machine(s)"
      }
    },
    "spatiotemporalBigDataStoreVirtualMachineDataDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [ "Premium_LRS", "Standard_LRS", "StandardSSD_LRS", "UltraSSD_LRS" ],
      "metadata": {
        "description": "(Optional) Managed disk type for the additional (Data) disk attached to the Spatiotemporal Big Data Store tier of Virtual Machines"
      }
    },
    "virtualMachineDataDiskSize": {
      "type": "int",
      "defaultValue": 32,
      "allowedValues": [ 32, 64, 128, 512, 1024, 2048 ],
      "metadata": {
        "description": "(Optional) Managed disk size for the additional (Data) disk attached to the Virtual Machine(s)"
      }
    },
    "spatiotemporalBigDataStoreVirtualMachineDataDiskSize": {
      "type": "int",
      "defaultValue": 32,
      "allowedValues": [ 32, 64, 128, 512, 1024, 2048, 4096 ],
      "metadata": {
        "description": "(Optional) Managed disk type for the additional (Data) disk attached to the Spatiotemporal Big Data tier of Virtual Machines"
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "AzureCloud",
      "allowedValues": [ "AzureCloud", "AzureGermanCloud", "AzureUSGovernment", "AzureChinaCloud" ],
      "metadata": {
        "description": "(Optional) Azure Environment for the deployment. E.g:- Public Azure, U.S. Gov. Cloud, Azure Germany, Azure China"
      }
    },
    "dataStoreTypes": {
      "type": "string",
      "defaultValue": "Relational",
      "metadata": {
        "description": "(Optional) The types of ArcGIS Data Stores that are enabled for this deployment"
      }
    },
    "dataStoreTypesForBaseDeploymentServers": {
      "type": "string",
      "defaultValue": "Relational",
      "metadata": {
        "description": "(Optional) The types of ArcGIS Data Stores that are enabled for this base deployment servers"
      }
    },
    "imageReferences": {
      "type": "object",
      "metadata": {
        "description": "Details of ArcGIS marketplace image or User Images"
      }
    },
    "enableRDPAccess": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether Remote Desktop Access to the File Share Machine should be enabled."
      }
    },
    "externalRDPPort": {
      "type": "int",
      "defaultValue": 3389,
      "metadata": {
        "description": "(Optional) External Port number for Remote Desktop Access to the File Share Machine should be enabled."
      }
    },
    "useCloudStorage": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether Azure Storage is used for the server config and portal content store"
      }
    },
    "useAzureFiles": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether Azure Files (SMB protocol) is used for the server config and portal content store"
      }
    },
    "fileShareName": {
      "type": "string",
      "metadata": {
        "description": "(Optional) Name of the file share on the file share host"
      },
      "defaultValue": "fileshare"
    },
    "cloudStorageAccountName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Name of the Azure Storage Account used. Required if 'useCloudStorage' is set to true"
      }
    },
    "cloudStorageAccountResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Name of the resource group for the Azure Storage Account specified with 'cloudStorageAccountName'. Required if 'useCloudStorage' is set to true"
      }
    },
    "cloudStorageAccountKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Storage Account Access Key for the Azure Storage Account specified with 'cloudStorageAccountName'. Required if 'useCloudStorage' is set to true"
      }
    },
    "timeZoneStandardName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Standard Name for the timezone to set for the Virtual Machines in the deployment"
      }
    },
    "enableAutomaticUpdates": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether to enable Automatic (Windows) Operating System updates"
      }
    },
    "joinWindowsDomain": {
      "type": "bool",
      "metadata": {
        "description": "(Optional) Indicates whether the virtual machines should join an existing Windows Active Directory which provides domain join and DNS services in the Virtual Network"
      },
      "defaultValue": false
    },
    "windowsDomainName": {
      "type": "string",
      "metadata": {
        "description": "(Optional) Domain FQDN where the virtual machine will be joined. Required if joinWindowsDomain = true"
      },
      "defaultValue": ""
    },
    "windowsDomainAdministratorUserName": {
      "type": "string",
      "metadata": {
        "description": "(Optional) Username for the Active Directory Domain Administrator account where the virtual machine will be joined. Required if joinWindowsDomain = true"
      },
      "defaultValue": ""
    },
    "windowsDomainAdministratorPassword": {
      "type": "securestring",
      "metadata": {
        "description": "(Optional) Password for the Active Directory Domain Administrator account where the virtual machine will be joined. Required if joinWindowsDomain = true"
      },
      "defaultValue": ""
    },
    "debugMode": {
      "type": "bool",
      "metadata": {
        "description": "(Optional) Indicates whether to enable debug settings on the site deployment. Used for troubleshooting only and should not be used for a Production Deployment"
      },
      "defaultValue": false
    },
    "arcgisDeploymentVersion": {
      "type": "string",
      "metadata": {
        "description": "(Optional) Version number of the ArcGIS Software used in the deployment"
      },
      "defaultValue": ""
    },
    "omsWorkspaceName": {
      "type": "string",
      "metadata": {
        "description": "Log Analytics workspace name"
      },
      "defaultValue": ""
    },
    "omsWorkspaceResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Log Analytics Workspace Resource Group Name"
      },
      "defaultValue": ""
    },
    "recoveryServicesVault": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Recovery services vault name where the VMs will be backed up to. "
      }
    },
    "recoveryServicesVaultResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Recovery services vault Resource Group to be used to backup VMs."
      }
    },
    "backupPolicy": {
      "type": "string",
      "defaultValue": "DefaultPolicy",
      "metadata": {
        "description": "Backup policy to be used to backup VMs. Backup POlicy defines the schedule of the backup and how long to retain backup copies. By default every vault comes with a 'DefaultPolicy' which canbe used here."
      }
    },
    "deploymentTrackingID": {
      "type": "string",
      "metadata": {
        "description": "(Optional) deployment Tracking ID based on Orchestrator being Automation or Cloud Builder "
      },
      "defaultValue": "c1b63db9-ae1f-46ef-b4ac-967001e57a5d"
    }
  },
  "variables": {
    "deploymentId": "[uniqueString(resourceGroup().id, concat(parameters('dnsPrefixForPublicIpAddress'),parameters('location')))]",
    "publicIPAddressResourceName": "[concat(parameters('deploymentPrefix'), 'PublicIP')]",
    "loadBalancerResourceName": "[concat(parameters('deploymentPrefix'), 'LoadBalancer')]",
    "loadBalancerResourceId": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerResourceName'))]",
    "loadBalancerFrontEndIPConfigName": "LBFE",
    "loadBalancerFrontEndIPConfigId": "[concat(variables('loadBalancerResourceId'),'/frontendIPConfigurations/', variables('loadBalancerFrontEndIPConfigName'))]",
    "loadBalancerBackendPoolName": "BackendPool",
    "loadBalancerBackendPoolId": "[concat(variables('loadBalancerResourceId'),'/backendAddressPools/', variables('loadBalancerBackendPoolName'))]",
    "vnetID": "[resourceId(parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks',parameters('existingVirtualNetworkName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',parameters('subnetName'))]",
    "virtualMachineNames": "[split(parameters('virtualMachineNames'),',')]",
    "numberOfVirtualMachines": "[length(variables('virtualMachineNames'))]",
    "nicName": "nic",
    "environmentToDomain": {
      "AzureCloud": ".cloudapp.azure.com",
      "AzureGermanCloud": ".cloudapp.azure.de",
      "AzureUSGovernment": ".cloudapp.azure.us",
      "AzureChinaCloud": ".cloudapp.azure.cn"
    },
    "environmentToBlobEndpoint": {
      "AzureCloud": ".blob.core.windows.net",
      "AzureGermanCloud": ".blob.core.cloudapi.de",
      "AzureUSGovernment": ".blob.core.usgovcloudapi.net",
      "AzureChinaCloud": ".blob.core.chinacloudapi.cn"
    },
    "spatiotemporalBigDataStoreVirtualMachineNames": "[split(parameters('spatiotemporalBigdataStoreVirtualMachineNames'),',')]",
    "spatiotemporalBigDataStoreVirtualMachineNameOptions": {
      "true": "[variables('spatiotemporalBigDataStoreVirtualMachineNames')]",
      "false": [ "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p" ]
    },
    "numberOfSpatiotemporalBigDataStoreVirtualMachines": "[length(variables('spatiotemporalBigDataStoreVirtualMachineNames'))]",
    "dscScriptFunction": "BaseDeploymentSingleTierConfiguration",
    "spatiotemporalBigDataStoreDscScriptFunction": "SpatiotemporalBigDataStoreConfiguration",
    "baseDeploymentAvailablitySetName": "[concat(parameters('deploymentPrefix'), 'AvailabilitySet-BaseDeployment')]",
    "spatiotemporalBigDataStoreAvailablitySetName": "[concat(parameters('deploymentPrefix'), 'AvailabilitySet-SpatiotemporalDataStore')]",
    "arcgisDeploymentDomain": "[concat(parameters('dnsPrefixForPublicIpAddress'), variables('environmentToDomain')[parameters('environment')])]",
    "computeApiVersion": "2018-06-01",
    "networkApiVersion": "2018-08-01",
    "computeApiVersionForVirtualMachines": "2018-06-01",
    "dscExtensionArchiveFileName": "DSC.zip",
    "virtualMachineImageSpecs": "[split(parameters('virtualMachineImageSpecs'),',')]",
    "spatiotemporalBigDataStoreVirtualMachineImageSpecs": "[split(parameters('spatiotemporalBigDataStoreVirtualMachineImageSpecs'),',')]",
    "spatiotemporalBigDataStoreVirtualMachineImageSpecsOptions": {
      "true": "[variables('spatiotemporalBigdataStoreVirtualMachineImageSpecs')]",
      "false": [ "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0" ]
    },
    "loadBalancerInboudNatRulesOptions": {
      "true": [
        {
          "name": "rdp",
          "properties": {
            "frontendIPConfiguration": {
              "id": "[variables('loadBalancerFrontEndIPConfigId')]"
            },
            "protocol": "TCP",
            "frontendPort": "[parameters('externalRDPPort')]",
            "backendPort": 3389,
            "idleTimeoutInMinutes": 4,
            "enableFloatingIP": false
          }
        }
      ],
      "false": []
    },
    "loadBalancerInboundNatRules": "[variables('loadBalancerInboudNatRulesOptions')[string(parameters('enableRDPAccess'))]]",
    "virtualMachineInboundNatRulesOptions": [
      {
        "true": [
          {
            "id": "[concat(variables('loadBalancerResourceId'),'/inboundNatRules/rdp')]"
          }
        ],
        "false": []
      },
      {
        "true": [],
        "false": []
      }
    ],
    "cloudStorageAccountCredentialsPassword": {
      "false": "placeholder",
      "true": "[parameters('cloudStorageAccountKey')]"
    },
    "cloudStorageAccountCredentialsUserName": {
      "false": "placeholder",
      "true": "[concat(parameters('cloudStorageAccountName'),variables('environmentToBlobEndpoint')[parameters('environment')])]"
    },
    "vmRoleOption": {
      "true": "FileShare,Server,Portal,DataStore,SpatiotemporalDataStore,ReverseProxy",
      "false": "FileShare,Server,Portal,DataStore,ReverseProxy"
    },
    "rdpTagOption": {
      "true": "[concat(parameters('dnsPrefixForPublicIpAddress'),'.',parameters('location'), variables('environmentToDomain')[parameters('environment')],':',parameters('externalRDPPort'))]",
      "false": ""
    },
    "cloudStorageOption": {
      "true": "[concat(substring(parameters('externalDnsHostName'), 0, indexOf(parameters('externalDnsHostName'),'.')), '@', parameters('cloudStorageAccountName'), variables('environmentToBlobEndpoint')[parameters('environment')], '@', parameters('cloudStorageAccountResourceGroupName'), '@',string(parameters('useAzureFiles')))]",
      "false": ""
    },
    "enableSpatiotemporalBigDataStore": "[not(empty(parameters('spatiotemporalBigDataStoreVirtualMachineNames')))]",
    "enableSpatiotemporalBigDataStoreOnBaseDeploymentMachines": "[contains(parameters('dataStoreTypesForBaseDeploymentServers'), 'SpatioTemporal')]",
    "omsWorkspace": {
      "true": "[concat(parameters('omsWorkspaceName'), '@', parameters('omsWorkspaceResourceGroupName'))]",
      "false": ""
    },
    "omsWorkspaceResourceId": "[if(and(not(empty(parameters('omsWorkspaceResourceGroupName'))),not(empty(parameters('omsWorkspaceName')))), resourceId(parameters('omsWorkspaceResourceGroupName'), 'Microsoft.OperationalInsights/workspaces/', parameters('omsWorkspaceName')),'')]",
    "backupFabric": "Azure",
    "v2VmType": "Microsoft.Compute/virtualMachines",
    "v2VmContainer": "iaasvmcontainer;iaasvmcontainerv2;",
    "v2Vm": "vm;iaasvmcontainerv2;"
  },
  "resources": [
    { 
      "apiVersion": "2014-04-01-preview" ,
      "name":  "[concat('pid-',parameters('deploymentTrackingID'))]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
      "mode" : "Incremental",
        "template" : { 
          "$schema":  "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressResourceName')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "location": "[parameters('location')]",
      "tags": {
        "arcgis-deployment-version": "[parameters('arcgisDeploymentVersion')]",
        "arcgis-deployment-info": "[concat(parameters('dnsPrefixForPublicIpAddress'),'@',parameters('deploymentPrefix'), '@', parameters('deploymentTimestamp'))]",
        "arcgis-deployment-server-role": "HostingServer",
        "arcgis-deployment-datastore-types": "[parameters('dataStoreTypes')]",
        "arcgis-deployment-id": "[variables('deploymentId')]",
        "arcgis-deployment-rdp-endpoint": "[variables('rdpTagOption')[string(parameters('enableRDPAccess'))]]",
        "arcgis-deployment-domain": "[parameters('externalDnsHostName')]",
        "arcgis-deployment-cloud-stg": "[variables('cloudStorageOption')[string(parameters('useCloudStorage'))]]",
        "arcgis-deployment-oms-workspace":"[variables('omsWorkspace')[string(not(empty(parameters('omsWorkspaceName'))))]]",
        "displayName": "Public IP Address"
      },
      "scale": null,
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "idleTimeoutInMinutes": 4,
        "dnsSettings": {
          "domainNameLabel": "[parameters('dnsPrefixForPublicIpAddress')]"
        }
      },
      "dependsOn": []
    },

    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('loadBalancerResourceName')]",
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[parameters('location')]",
      "sku":{
        "name": "[parameters('loadBalancerSKU')]"
      },
      "tags": {
        "displayName": "Load Balancer",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "scale": null,
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('loadBalancerFrontEndIPConfigName')]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressResourceName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('loadBalancerBackendPoolName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "HTTP",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('loadBalancerFrontEndIPConfigId')]"
              },
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[variables('loadBalancerBackendPoolId')]"
              }
            }
          },
          {
            "name": "HTTPS",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('loadBalancerFrontEndIPConfigId')]"
              },
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[variables('loadBalancerBackendPoolId')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "lbprobe",
            "properties": {
              "protocol": "Tcp",
              "port": 80,
              "intervalInSeconds": 30,
              "numberOfProbes": 3
            }
          }
        ],
        "inboundNatRules": "[variables('loadBalancerInboundNatRules')]",
        "outboundNatRules": [],
        "inboundNatPools": []
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressResourceName'))]"
      ]
    },

    {
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('baseDeploymentAvailablitySetName')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "Base Deployment Availability Set",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "properties": {
        "platformUpdateDomainCount": 2,
        "platformFaultDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },

    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('virtualMachineNames')[copyIndex()], '-', variables('nicName'))]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "Network Interface",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "copy": {
        "name": "nic-copy",
        "count": "[variables('numberOfVirtualMachines')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerResourceName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[variables('loadBalancerBackendPoolId')]"
                }
              ],
              "loadBalancerInboundNatRules": "[variables('virtualMachineInboundNatRulesOptions')[copyIndex()][string(parameters('enableRDPAccess'))]]"
            }
          }
        ]
      }
    },
    {
      "condition": "[not(empty(parameters('adminPassword')))]",
      "apiVersion": "[variables('computeApiVersionForVirtualMachines')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('virtualMachineNames')[copyIndex()]]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vm-copy",
        "count": "[variables('numberOfVirtualMachines')]"
      },
      "tags": {
        "arcgis-vm-roles": "[variables('vmRoleOption')[string(variables('enableSpatiotemporalBigDataStoreOnBaseDeploymentMachines'))]]",
        "arcgis-deployment-id": "[variables('deploymentId')]",
        "displayName": "Base Deployment Server"
      },
      "plan": "[if(equals(string(parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['UseManagedDiskImage']),'True'),json('null'),json(concat('{\"publisher\":\"',parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['Publisher'],'\",\"product\":\"',parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['Offer'],'\",\"name\":\"',parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['SKU'],'\"}')))]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('virtualMachineNames')[copyIndex()], '-', variables('nicName'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('baseDeploymentAvailablitySetName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('baseDeploymentAvailablitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('virtualMachineSize')]"
        },
        "osProfile": {
          "computername": "[variables('virtualMachineNames')[copyIndex()]]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
            "timeZone": "[parameters('timeZoneStandardName')]"
          }
        },
        "storageProfile": {
          "imageReference": "[if(equals(string(parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['UseManagedDiskImage']),'True'),json(concat('{\"id\":\"',resourceid(string(parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['UserImageResourceGroupName']),'Microsoft.Compute/images',string(parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['UserImageName'])),'\"}')),json(concat('{\"publisher\":\"',parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['Publisher'],'\",\"offer\":\"',parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['Offer'],'\",\"sku\":\"',parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['SKU'],'\",\"version\":\"latest\"}')))]", 
          "osDisk": {
            "name": "[concat(variables('virtualMachineNames')[copyIndex()],'-','OSDisk')]",
            "managedDisk": {
              "storageAccountType": "[parameters('virtualMachineOSDiskType')]"
            },
            "diskSizeGB": "[parameters('virtualMachineOSDiskSize')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": "[if(equals(string(parameters('enableVirtualMachineDataDisk')),'True'), json(concat('[{\"name\":\"', concat(variables('virtualMachineNames')[copyIndex()],'-','DataDisk'), '\", \"lun\": 0, \"createOption\": \"empty\", \"diskSizeGB\": \"', parameters('virtualMachineDataDiskSize'), '\", \"managedDisk\": { \"storageAccountType\":\"', parameters('virtualMachineDataDiskType') ,'\"} }]')), json('null'))]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('virtualMachineNames')[copyIndex()], '-',variables('nicName')))]"
            }
          ]
        }
      }
    },

    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "condition": "[and(not(empty(parameters('omsWorkspaceResourceGroupName'))),not(empty(parameters('omsWorkspaceName'))))]",
      "name": "[concat(variables('virtualMachineNames')[copyIndex()],'/LogAnalytics')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vm-copy",
        "count": "[variables('numberOfVirtualMachines')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('virtualMachineNames')[copyIndex()])]"
      ],
      "properties": {
        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
        "type": "MicrosoftMonitoringAgent",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "workspaceId": "[if(not(empty(variables('omsWorkspaceResourceId'))),reference(variables('omsWorkspaceResourceId'),'2015-11-01-preview').customerId ,json('null'))]"
        },
        "protectedSettings": {
          "workspaceKey": "[if(not(empty(variables('omsWorkspaceResourceId'))),listKeys(variables('omsWorkspaceResourceId'),'2015-11-01-preview').primarySharedKey ,json('null'))]"
        }
      }
    },

    {
      "name": "[concat(variables('virtualMachineNames')[copyIndex()],'/DSCConfiguration',copyIndex())]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[parameters('location')]",
      "copy": {
        "name": "DSC-copy",
        "count": "[variables('numberOfVirtualMachines')]",
        "mode": "serial"
      },
      "tags": {
        "displayName": "DSC Script"
      },
      "dependsOn": [
        "[variables('virtualMachineNames')[copyIndex()]]",
        "[concat(resourceId('Microsoft.Compute/VirtualMachines', variables('virtualMachineNames')[copyIndex()]),'/extensions/JoinDomain')]"
      ],
      "apiVersion": "[variables('computeApiVersionForVirtualMachines')]",
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.26",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "wmfVersion": "latest",
          "configuration": {
            "url": "[concat(parameters('_artifactsLocation'), '/', variables('dscExtensionArchiveFileName'))]",
            "function": "[variables('dscScriptFunction')]",
            "script": "[concat(variables('dscScriptFunction'), '.ps1')]"
          },
          "configurationArguments": {
            "SSLCertificateFileUrl": "[if(empty(parameters('sslCertificateFileUrl')),if(empty(parameters('sslCertificateFileName')), '', concat(parameters('_artifactsLocation'), '/', parameters('sslCertificateFileName'), parameters('_artifactsLocationSasToken'))), parameters('sslCertificateFileUrl'))]",
            "ServerLicenseFileUrl": "[if(empty(parameters('serverLicenseFileUrl')),if(empty(parameters('serverLicenseFileName')), '', concat(parameters('_artifactsLocation'), '/', parameters('serverLicenseFileName'), parameters('_artifactsLocationSasToken'))), parameters('serverLicenseFileUrl'))]",
            "PortalLicenseFileUrl": "[if(empty(parameters('portalLicenseFileUrl')),if(empty(parameters('portalLicenseFileName')), '', concat(parameters('_artifactsLocation'), '/', parameters('portalLicenseFileName'), parameters('_artifactsLocationSasToken'))), parameters('portalLicenseFileUrl'))]",
            "PortalLicenseUserType": "[if(empty(parameters('portalLicenseUserType')),'',parameters('portalLicenseUserType'))]",
            "MachineName": "[first(variables('virtualMachineNames'))]",
            "PeerMachineName": "[last(variables('virtualMachineNames'))]",
            "ExternalDNSHostName": "[parameters('externalDnsHostName')]",
            "DataStoreTypes": "[parameters('dataStoreTypesForBaseDeploymentServers')]",
            "FileShareName": "[parameters('fileShareName')]",
            "UseCloudStorage": "[parameters('useCloudStorage')]",
            "UseAzureFiles": "[parameters('useAzureFiles')]",
            "OSDiskSize": "[parameters('virtualMachineOSDiskSize')]",
            "EnableDataDisk": "[string(parameters('enableVirtualMachineDataDisk'))]",
            "DebugMode": "[string(parameters('debugMode'))]"
          }
        },
        "protectedSettings": {
          "configurationUrlSasToken": "[parameters('_artifactsLocationSasToken')]",
          "configurationArguments": {
            "ServiceCredential": {
              "userName": "[if(empty(parameters('arcgisServiceAccountUserName')),'PlaceHolder', parameters('arcgisServiceAccountUserName'))]",
              "password": "[if(empty(parameters('arcgisServiceAccountPassword')),'PlaceHolder', parameters('arcgisServiceAccountPassword'))]"
            },
            "MachineAdministratorCredential": {
              "userName": "[if(empty(parameters('adminUsername')),'PlaceHolder', parameters('adminUsername'))]",
              "password": "[if(empty(parameters('adminPassword')),'PlaceHolder', parameters('adminPassword'))]"
            },
            "SSLCertificatePassword": {
              "userName": "PlaceHolder",
              "password": "[if(empty(parameters('sslCertificatePassword')),'PlaceHolder', parameters('sslCertificatePassword'))]"
            },
            "SiteAdministratorCredential": {
              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
            },
            "StorageAccountCredential": {
              "userName": "[variables('cloudStorageAccountCredentialsUserName')[string(parameters('useCloudStorage'))]]",
              "password": "[variables('cloudStorageAccountCredentialsPassword')[string(parameters('useCloudStorage'))]]"
            }
          }
        }
      }
    },

    {
      "condition": "[equals(string(parameters('joinWindowsDomain')), 'True')]",
      "apiVersion": "[variables('computeApiVersionForVirtualMachines')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('virtualMachineNames')[copyIndex()],'/JoinDomain')]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "baseDeploymentServerDomainJoinCopy",
        "count": "[length(variables('virtualMachineNames'))]"
      },
      "dependsOn": [
        "[variables('virtualMachineNames')[copyIndex()]]"
      ],
      "tags": {
        "displayName": "(Optional) Base Deployment Server Domain Join"
      },
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "JsonADDomainExtension",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "Name": "[parameters('windowsDomainName')]",
          "User": "[parameters('windowsDomainAdministratorUserName')]",
          "Restart": "true",
          "Options": 3
        },
        "protectedSettings": {
          "Password": "[parameters('windowsDomainAdministratorPassword')]"
        }
      }
    },


    {
      "condition": "[equals(string(variables('enableSpatiotemporalBigDataStore')),'True')]",
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('spatiotemporalBigDataStoreAvailablitySetName')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "(Optional) Big Data Store Availability Set",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "properties": {
        "platformUpdateDomainCount": 2,
        "platformFaultDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },

    {
      "condition": "[equals(string(variables('enableSpatiotemporalBigDataStore')),'True')]",
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()], '-', variables('nicName'))]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "nic-copy",
        "count": "[variables('numberOfSpatiotemporalBigDataStoreVirtualMachines')]"
      },
      "tags": {
        "displayName": "(Optional) Big Data Store Network Interfaces",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "dependsOn": [

      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {      
      "condition": "[and(not(empty(parameters('adminPassword'))), equals(string(variables('enableSpatiotemporalBigDataStore')),'True'))]",
      "apiVersion": "[variables('computeApiVersionForVirtualMachines')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()]]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vm-copy",
        "count": "[variables('numberOfSpatiotemporalBigDataStoreVirtualMachines')]"
      },
      "tags": {
        "arcgis-vm-roles": "SpatiotemporalDataStore",
        "arcgis-deployment-id": "[variables('deploymentId')]",
        "displayName": "(Optional) Big Data Store Virtual Machines"
      },
      "plan": "[if(equals(string(parameters('imageReferences')[string(variables('spatiotemporalBigDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]['UseManagedDiskImage']),'True'),json('null'),json(concat('{\"publisher\":\"',parameters('imageReferences')[string(variables('spatiotemporalBigDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]['Publisher'],'\",\"product\":\"',parameters('imageReferences')[string(variables('spatiotemporalBigDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]['Offer'],'\",\"name\":\"',parameters('imageReferences')[string(variables('spatiotemporalBigDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]['SKU'],'\"}')))]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()], '-', variables('nicName'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('spatiotemporalBigDataStoreAvailablitySetName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('spatiotemporalBigDataStoreAvailablitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('spatiotemporalBigDataStoreVirtualMachineSize')]"
        },
        "osProfile": {
          "computername": "[variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()]]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
            "timeZone": "[parameters('timeZoneStandardName')]"
          }
        },
        "storageProfile": {
          "imageReference": "[if(equals(string(parameters('imageReferences')[string(variables('spatiotemporalBigDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]['UseManagedDiskImage']),'True'),json(concat('{\"id\":\"',resourceid(string(parameters('imageReferences')[string(variables('spatiotemporalBigDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]['UserImageResourceGroupName']),'Microsoft.Compute/images',string(parameters('imageReferences')[string(variables('spatiotemporalBigDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]['UserImageName'])),'\"}')),json(concat('{\"publisher\":\"',parameters('imageReferences')[string(variables('spatiotemporalBigDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]['Publisher'],'\",\"offer\":\"',parameters('imageReferences')[string(variables('spatiotemporalBigDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]['Offer'],'\",\"sku\":\"',parameters('imageReferences')[string(variables('spatiotemporalBigDataStoreVirtualMachineImageSpecsOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]['SKU'],'\",\"version\":\"latest\"}')))]",
          "osDisk": {
            "name": "[concat(variables('spatiotemporalBigDataStoreVirtualMachineNames')[copyIndex()],'-','OSDisk')]",
            "managedDisk": {
              "storageAccountType": "[parameters('spatiotemporalBigDataStoreVirtualMachineOSDiskType')]"
            },
            "diskSizeGB": "[parameters('spatiotemporalBigDataStoreVirtualMachineOSDiskSize')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": "[if(equals(string(parameters('enableSpatiotemporalBigDataStoreVirtualMachineDataDisk')),'True'), json(concat('[{\"name\":\"', concat(variables('spatiotemporalBigDataStoreVirtualMachineNames')[copyIndex()],'-','DataDisk'), '\", \"lun\": 0, \"createOption\": \"empty\", \"diskSizeGB\": \"', parameters('spatiotemporalBigDataStoreVirtualMachineDataDiskSize'), '\", \"managedDisk\": { \"storageAccountType\":\"', parameters('spatiotemporalBigDataStoreVirtualMachineDataDiskType') ,'\"} }]')), json('null'))]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('spatiotemporalBigDataStoreVirtualMachineNames')[copyIndex()], '-',variables('nicName')))]"
            }
          ]
        }
      }
    },

    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "condition": "[and(and(not(empty(parameters('omsWorkspaceResourceGroupName'))),not(empty(parameters('omsWorkspaceName')))), variables('enableSpatiotemporalBigDataStore'))]",
      "name": "[concat(variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()],'/LogAnalytics')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vm-copy",
        "count": "[variables('numberOfSpatiotemporalBigDataStoreVirtualMachines')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]"
      ],
      "properties": {
        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
        "type": "MicrosoftMonitoringAgent",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "workspaceId": "[if(not(empty(variables('omsWorkspaceResourceId'))),reference(variables('omsWorkspaceResourceId'),'2015-11-01-preview').customerId ,json('null'))]"
        },
        "protectedSettings": {
          "workspaceKey": "[if(not(empty(variables('omsWorkspaceResourceId'))),listKeys(variables('omsWorkspaceResourceId'),'2015-11-01-preview').primarySharedKey ,json('null'))]"
        }
      }
    },


    {
      "condition": "[equals(string(variables('enableSpatiotemporalBigDataStore')),'True')]",
      "name": "[concat(variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()],'/DSCConfiguration',copyIndex())]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[parameters('location')]",
      "copy": {
        "name": "DSC-copy",
        "count": "[variables('numberOfSpatiotemporalBigDataStoreVirtualMachines')]",
        "mode": "serial"
      },
      "tags": {
        "displayName": "(Optional) Big Data Store DSC Scripts"
      },
      "dependsOn": [
        "[concat(resourceId('Microsoft.Compute/VirtualMachines', concat(first(variables('virtualMachineNames')))),'/extensions/DSCConfiguration0')]",
        "[variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()]]"
      ],
      "apiVersion": "[variables('computeApiVersionForVirtualMachines')]",
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.26",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "wmfVersion": "latest",
          "configuration": {
            "url": "[concat(parameters('_artifactsLocation'), '/', variables('dscExtensionArchiveFileName'))]",
            "function": "[variables('spatiotemporalBigDataStoreDscScriptFunction')]",
            "script": "[concat(variables('spatiotemporalBigDataStoreDscScriptFunction'), '.ps1')]"
          },
          "configurationArguments": {
            "SpatiotemporalBigDataStoreMachineNames": "[parameters('spatiotemporalBigDataStoreVirtualMachineNames')]",
            "FileShareMachineName": "[first(variables('virtualMachineNames'))]",
            "FileShareName": "[parameters('fileShareName')]",
            "ServerMachineNames": "[parameters('virtualMachineNames')]",
            "OSDiskSize": "[parameters('spatiotemporalBigDataStoreVirtualMachineOSDiskSize')]",
            "EnableDataDisk": "[string(parameters('enableSpatiotemporalBigDataStoreVirtualMachineDataDisk'))]",
            "DebugMode": "[string(parameters('debugMode'))]"
          }
        },
        "protectedSettings": {
          "configurationUrlSasToken": "[parameters('_artifactsLocationSasToken')]",
          "configurationArguments": {
            "ServiceCredential": {
              "userName": "[if(empty(parameters('arcgisServiceAccountUserName')),'PlaceHolder', parameters('arcgisServiceAccountUserName'))]",
              "password": "[if(empty(parameters('arcgisServiceAccountPassword')),'PlaceHolder', parameters('arcgisServiceAccountPassword'))]"
            },
            "SiteAdministratorCredential": {
              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
            }
          }
        }
      }
    },

    {
      "condition": "[and(equals(string(variables('enableSpatiotemporalBigDataStore')),'True'), equals(string(parameters('joinWindowsDomain')), 'True'))]",
      "apiVersion": "[variables('computeApiVersionForVirtualMachines')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()],'/JoinDomain', copyIndex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "bigDataStoreDomainJoinCopy",
        "count": "[length(variables('spatiotemporalBigDataStoreVirtualMachineNames'))]"
      },
      "dependsOn": [
        "[variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()]]"
      ],
      "tags": {
        "displayName": "(Optional) Big Data Store Domain Join"
      },
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "JsonADDomainExtension",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "Name": "[parameters('windowsDomainName')]",
          "User": "[parameters('windowsDomainAdministratorUserName')]",
          "Restart": "true",
          "Options": 3
        },
        "protectedSettings": {
          "Password": "[parameters('windowsDomainAdministratorPassword')]"
        }
      }
    },

    {
      "condition": "[not(empty(parameters('recoveryServicesVault')))]",  
      "apiVersion": "2017-05-10",
      "name": "nestedTemplate",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup":  "[parameters('recoveryServicesVaultResourceGroup')]",
      "properties": {
          "mode": "Incremental",
          "template": {
              "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
              "contentVersion": "1.0.0.0",
              "parameters": {},
              "variables": {},
              "resources": [
                {
                  "name": "[concat(parameters('recoveryServicesVault'), '/', variables('backupFabric'), '/', variables('v2VmContainer'), concat(resourceGroup().name,';',parameters('virtualMachineNames')[copyIndex()]), '/', variables('v2Vm'), concat(resourceGroup().name,';',parameters('virtualMachineNames')[copyIndex()]))]",
                  "apiVersion": "2016-06-01",
                  "location": "[parameters('location')]",
                  "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                  "copy": {
                    "name": "v2VmsCopy",
                    "count": "[variables('numberOfVirtualMachines')]"
                  },
                  "properties": {
                    "protectedItemType": "[variables('v2VmType')]",
                    "policyId": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies',parameters('recoveryServicesVault'),parameters('backupPolicy') )]",
                    "sourceResourceId": "[resourceId(subscription().subscriptionId,resourceGroup().name,'Microsoft.Compute/virtualMachines',parameters('virtualMachineNames')[copyIndex()])]"
                  }
                },     
                {
                  "condition": "[equals(string(variables('enableSpatiotemporalBigDataStore')),'True')]",
                  "name": "[concat(parameters('recoveryServicesVault'), '/', variables('backupFabric'), '/', variables('v2VmContainer'), concat(resourceGroup().name,';',variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()]), '/', variables('v2Vm'), concat(resourceGroup().name,';',variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()]))]",
                  "apiVersion": "2016-06-01",
                  
                  "location": "[parameters('location')]",
                  "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                  "copy": {
                    "name": "v2VmsCopy",
                    "count": "[variables('numberOfSpatiotemporalBigDataStoreVirtualMachines')]"
                  },
                  "properties": {
                    "protectedItemType": "[variables('v2VmType')]",
                    "policyId": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies',parameters('recoveryServicesVault'),parameters('backupPolicy') )]",
                    "sourceResourceId": "[resourceId(subscription().subscriptionId,resourceGroup().name,'Microsoft.Compute/virtualMachines',variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]"
                  }
                }
              ]
          },
          "parameters": {}
      }
    }
  ],
  "outputs": {
    "homeAppUrl": {
      "type": "string",
      "value": "[concat('http://', parameters('externalDnsHostName'))]"
    }
  }
}
